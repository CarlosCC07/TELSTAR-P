Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program_2 inicioMain BRACES code_statute BRACES
Rule 2     inicioMain -> MAIN
Rule 3     program_2 -> type ID program_aux program_2
Rule 4     program_2 -> <empty>
Rule 5     program_aux -> variable_dec
Rule 6     program_aux -> function_dec
Rule 7     code_statute -> statute code_statute
Rule 8     code_statute -> <empty>
Rule 9     statute -> print_statute
Rule 10    statute -> ID statute_2
Rule 11    statute -> if_statute
Rule 12    statute -> while_statute
Rule 13    statute -> do_while_statute
Rule 14    statute -> type ID variable_dec
Rule 15    statute_2 -> L_PAR const_id_3 R_PAR END_LINE
Rule 16    statute_2 -> assign_statute ASSIGN statute_aux
Rule 17    statute_aux -> input_statute
Rule 18    statute_aux -> assign_statute_aux END_LINE
Rule 19    function_dec -> function_id function_call code_statute return_statute BRACES
Rule 20    function_id -> L_PAR function_id_2 R_PAR
Rule 21    function_id_2 -> type params_id function_id_aux function_id_3
Rule 22    function_id_2 -> <empty>
Rule 23    function_id_3 -> param_aux function_id_2
Rule 24    function_id_3 -> <empty>
Rule 25    function_id_aux -> L_BRACKET exp R_BRACKET
Rule 26    function_id_aux -> <empty>
Rule 27    params_id -> ID
Rule 28    param_aux -> COMMA
Rule 29    function_call -> BRACES
Rule 30    return_statute -> RETURN return_statute_aux END_LINE
Rule 31    return_statute_aux -> const_var
Rule 32    return_statute_aux -> <empty>
Rule 33    variable_dec -> variable_dec_2 END_LINE
Rule 34    variable_dec_2 -> variable_dec_3 variable_dec_aux
Rule 35    variable_dec_3 -> L_BRACKET exp R_BRACKET
Rule 36    variable_dec_3 -> <empty>
Rule 37    variable_dec_aux -> COMMA ID variable_dec_2
Rule 38    variable_dec_aux -> <empty>
Rule 39    print_statute -> PRINT L_PAR operation R_PAR END_LINE
Rule 40    assign_statute -> L_BRACKET exp R_BRACKET
Rule 41    assign_statute -> <empty>
Rule 42    assign_statute_aux -> operation
Rule 43    operation -> expression operation_aux
Rule 44    operation_aux -> AO_OPERATOR operation
Rule 45    operation_aux -> <empty>
Rule 46    expression -> exp expression_aux
Rule 47    expression_aux -> LOGIC_OPERATOR exp
Rule 48    expression_aux -> <empty>
Rule 49    factor -> L_PAR expression R_PAR
Rule 50    factor -> const_var
Rule 51    factor -> AS_OPERATOR const_var
Rule 52    exp -> term exp_aux
Rule 53    exp_aux -> AS_OPERATOR exp
Rule 54    exp_aux -> <empty>
Rule 55    term -> factor term_aux
Rule 56    term_aux -> MD_OPERATOR term
Rule 57    term_aux -> <empty>
Rule 58    while_statute -> WHILE L_PAR operation while_init BRACES code_statute while_end
Rule 59    while_init -> R_PAR
Rule 60    while_end -> BRACES
Rule 61    do_while_statute -> DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end
Rule 62    do_while_init -> BRACES
Rule 63    do_while_end -> R_PAR
Rule 64    if_statute -> IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux
Rule 65    if_statute_aux -> else_statute BRACES code_statute BRACES
Rule 66    if_statute_aux -> <empty>
Rule 67    else_statute -> ELSE
Rule 68    input_statute -> INPUT L_PAR type R_PAR END_LINE
Rule 69    const_var -> const_int
Rule 70    const_var -> const_float
Rule 71    const_var -> const_boolean
Rule 72    const_var -> const_id
Rule 73    const_int -> INT
Rule 74    const_float -> FLOAT
Rule 75    const_boolean -> BOOLEAN
Rule 76    const_id -> ID const_id_2
Rule 77    const_id_2 -> L_BRACKET exp R_BRACKET
Rule 78    const_id_2 -> L_PAR const_id_3 R_PAR
Rule 79    const_id_2 -> <empty>
Rule 80    const_id_3 -> const_var const_id_aux
Rule 81    const_id_3 -> <empty>
Rule 82    const_id_aux -> COMMA const_id_3
Rule 83    const_id_aux -> <empty>
Rule 84    type -> TYPE_INT
Rule 85    type -> TYPE_FLOAT
Rule 86    type -> TYPE_BOOLEAN
Rule 87    type -> TYPE_VOID
Rule 88    if_init -> R_PAR

Terminals, with rules where they appear

AO_OPERATOR          : 44
ASSIGN               : 16
AS_OPERATOR          : 51 53
BOOLEAN              : 75
BRACES               : 1 1 19 29 58 60 61 62 64 64 65 65
COMMA                : 28 37 82
DO                   : 61
ELSE                 : 67
END_LINE             : 15 18 30 33 39 68
FLOAT                : 74
ID                   : 3 10 14 27 37 76
IF                   : 64
INPUT                : 68
INT                  : 73
LOGIC_OPERATOR       : 47
L_BRACKET            : 25 35 40 77
L_PAR                : 15 20 39 49 58 61 64 68 78
MAIN                 : 2
MD_OPERATOR          : 56
PRINT                : 39
RETURN               : 30
R_BRACKET            : 25 35 40 77
R_PAR                : 15 20 39 49 59 63 68 78 88
TYPE_BOOLEAN         : 86
TYPE_FLOAT           : 85
TYPE_INT             : 84
TYPE_VOID            : 87
WHILE                : 58 61
error                : 

Nonterminals, with rules where they appear

assign_statute       : 16
assign_statute_aux   : 18
code_statute         : 1 7 19 58 61 64 65
const_boolean        : 71
const_float          : 70
const_id             : 72
const_id_2           : 76
const_id_3           : 15 78 82
const_id_aux         : 80
const_int            : 69
const_var            : 31 50 51 80
do_while_end         : 61
do_while_init        : 61
do_while_statute     : 13
else_statute         : 65
exp                  : 25 35 40 46 47 53 77
exp_aux              : 52
expression           : 43 49
expression_aux       : 46
factor               : 55
function_call        : 19
function_dec         : 6
function_id          : 19
function_id_2        : 20 23
function_id_3        : 21
function_id_aux      : 21
if_init              : 64
if_statute           : 11
if_statute_aux       : 64
inicioMain           : 1
input_statute        : 17
operation            : 39 42 44 58 61 64
operation_aux        : 43
param_aux            : 23
params_id            : 21
print_statute        : 9
program              : 0
program_2            : 1 3
program_aux          : 3
return_statute       : 19
return_statute_aux   : 30
statute              : 7
statute_2            : 10
statute_aux          : 16
term                 : 52 56
term_aux             : 55
type                 : 3 14 21 68
variable_dec         : 5 14
variable_dec_2       : 33 37
variable_dec_3       : 34
variable_dec_aux     : 34
while_end            : 58
while_init           : 58
while_statute        : 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_2 inicioMain BRACES code_statute BRACES
    (3) program_2 -> . type ID program_aux program_2
    (4) program_2 -> .
    (84) type -> . TYPE_INT
    (85) type -> . TYPE_FLOAT
    (86) type -> . TYPE_BOOLEAN
    (87) type -> . TYPE_VOID

    MAIN            reduce using rule 4 (program_2 -> .)
    TYPE_INT        shift and go to state 1
    TYPE_FLOAT      shift and go to state 2
    TYPE_BOOLEAN    shift and go to state 5
    TYPE_VOID       shift and go to state 7

    program_2                      shift and go to state 3
    program                        shift and go to state 4
    type                           shift and go to state 6

state 1

    (84) type -> TYPE_INT .

    ID              reduce using rule 84 (type -> TYPE_INT .)
    R_PAR           reduce using rule 84 (type -> TYPE_INT .)


state 2

    (85) type -> TYPE_FLOAT .

    ID              reduce using rule 85 (type -> TYPE_FLOAT .)
    R_PAR           reduce using rule 85 (type -> TYPE_FLOAT .)


state 3

    (1) program -> program_2 . inicioMain BRACES code_statute BRACES
    (2) inicioMain -> . MAIN

    MAIN            shift and go to state 8

    inicioMain                     shift and go to state 9

state 4

    (0) S' -> program .



state 5

    (86) type -> TYPE_BOOLEAN .

    ID              reduce using rule 86 (type -> TYPE_BOOLEAN .)
    R_PAR           reduce using rule 86 (type -> TYPE_BOOLEAN .)


state 6

    (3) program_2 -> type . ID program_aux program_2

    ID              shift and go to state 10


state 7

    (87) type -> TYPE_VOID .

    ID              reduce using rule 87 (type -> TYPE_VOID .)
    R_PAR           reduce using rule 87 (type -> TYPE_VOID .)


state 8

    (2) inicioMain -> MAIN .

    BRACES          reduce using rule 2 (inicioMain -> MAIN .)


state 9

    (1) program -> program_2 inicioMain . BRACES code_statute BRACES

    BRACES          shift and go to state 11


state 10

    (3) program_2 -> type ID . program_aux program_2
    (5) program_aux -> . variable_dec
    (6) program_aux -> . function_dec
    (33) variable_dec -> . variable_dec_2 END_LINE
    (19) function_dec -> . function_id function_call code_statute return_statute BRACES
    (34) variable_dec_2 -> . variable_dec_3 variable_dec_aux
    (20) function_id -> . L_PAR function_id_2 R_PAR
    (35) variable_dec_3 -> . L_BRACKET exp R_BRACKET
    (36) variable_dec_3 -> .

    L_PAR           shift and go to state 14
    L_BRACKET       shift and go to state 16
    COMMA           reduce using rule 36 (variable_dec_3 -> .)
    END_LINE        reduce using rule 36 (variable_dec_3 -> .)

    variable_dec_2                 shift and go to state 12
    variable_dec_3                 shift and go to state 13
    function_dec                   shift and go to state 15
    program_aux                    shift and go to state 17
    variable_dec                   shift and go to state 18
    function_id                    shift and go to state 19

state 11

    (1) program -> program_2 inicioMain BRACES . code_statute BRACES
    (7) code_statute -> . statute code_statute
    (8) code_statute -> .
    (9) statute -> . print_statute
    (10) statute -> . ID statute_2
    (11) statute -> . if_statute
    (12) statute -> . while_statute
    (13) statute -> . do_while_statute
    (14) statute -> . type ID variable_dec
    (39) print_statute -> . PRINT L_PAR operation R_PAR END_LINE
    (64) if_statute -> . IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux
    (58) while_statute -> . WHILE L_PAR operation while_init BRACES code_statute while_end
    (61) do_while_statute -> . DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end
    (84) type -> . TYPE_INT
    (85) type -> . TYPE_FLOAT
    (86) type -> . TYPE_BOOLEAN
    (87) type -> . TYPE_VOID

    BRACES          reduce using rule 8 (code_statute -> .)
    ID              shift and go to state 26
    PRINT           shift and go to state 24
    IF              shift and go to state 29
    WHILE           shift and go to state 22
    DO              shift and go to state 20
    TYPE_INT        shift and go to state 1
    TYPE_FLOAT      shift and go to state 2
    TYPE_BOOLEAN    shift and go to state 5
    TYPE_VOID       shift and go to state 7

    statute                        shift and go to state 30
    code_statute                   shift and go to state 21
    do_while_statute               shift and go to state 25
    print_statute                  shift and go to state 31
    if_statute                     shift and go to state 23
    type                           shift and go to state 27
    while_statute                  shift and go to state 28

state 12

    (33) variable_dec -> variable_dec_2 . END_LINE

    END_LINE        shift and go to state 32


state 13

    (34) variable_dec_2 -> variable_dec_3 . variable_dec_aux
    (37) variable_dec_aux -> . COMMA ID variable_dec_2
    (38) variable_dec_aux -> .

    COMMA           shift and go to state 33
    END_LINE        reduce using rule 38 (variable_dec_aux -> .)

    variable_dec_aux               shift and go to state 34

state 14

    (20) function_id -> L_PAR . function_id_2 R_PAR
    (21) function_id_2 -> . type params_id function_id_aux function_id_3
    (22) function_id_2 -> .
    (84) type -> . TYPE_INT
    (85) type -> . TYPE_FLOAT
    (86) type -> . TYPE_BOOLEAN
    (87) type -> . TYPE_VOID

    R_PAR           reduce using rule 22 (function_id_2 -> .)
    TYPE_INT        shift and go to state 1
    TYPE_FLOAT      shift and go to state 2
    TYPE_BOOLEAN    shift and go to state 5
    TYPE_VOID       shift and go to state 7

    function_id_2                  shift and go to state 35
    type                           shift and go to state 36

state 15

    (6) program_aux -> function_dec .

    TYPE_INT        reduce using rule 6 (program_aux -> function_dec .)
    TYPE_FLOAT      reduce using rule 6 (program_aux -> function_dec .)
    TYPE_BOOLEAN    reduce using rule 6 (program_aux -> function_dec .)
    TYPE_VOID       reduce using rule 6 (program_aux -> function_dec .)
    MAIN            reduce using rule 6 (program_aux -> function_dec .)


state 16

    (35) variable_dec_3 -> L_BRACKET . exp R_BRACKET
    (52) exp -> . term exp_aux
    (55) term -> . factor term_aux
    (49) factor -> . L_PAR expression R_PAR
    (50) factor -> . const_var
    (51) factor -> . AS_OPERATOR const_var
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    L_PAR           shift and go to state 42
    AS_OPERATOR     shift and go to state 40
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    term                           shift and go to state 37
    const_int                      shift and go to state 39
    const_var                      shift and go to state 44
    const_boolean                  shift and go to state 41
    exp                            shift and go to state 45
    factor                         shift and go to state 46
    const_float                    shift and go to state 48
    const_id                       shift and go to state 50

state 17

    (3) program_2 -> type ID program_aux . program_2
    (3) program_2 -> . type ID program_aux program_2
    (4) program_2 -> .
    (84) type -> . TYPE_INT
    (85) type -> . TYPE_FLOAT
    (86) type -> . TYPE_BOOLEAN
    (87) type -> . TYPE_VOID

    MAIN            reduce using rule 4 (program_2 -> .)
    TYPE_INT        shift and go to state 1
    TYPE_FLOAT      shift and go to state 2
    TYPE_BOOLEAN    shift and go to state 5
    TYPE_VOID       shift and go to state 7

    program_2                      shift and go to state 51
    type                           shift and go to state 6

state 18

    (5) program_aux -> variable_dec .

    TYPE_INT        reduce using rule 5 (program_aux -> variable_dec .)
    TYPE_FLOAT      reduce using rule 5 (program_aux -> variable_dec .)
    TYPE_BOOLEAN    reduce using rule 5 (program_aux -> variable_dec .)
    TYPE_VOID       reduce using rule 5 (program_aux -> variable_dec .)
    MAIN            reduce using rule 5 (program_aux -> variable_dec .)


state 19

    (19) function_dec -> function_id . function_call code_statute return_statute BRACES
    (29) function_call -> . BRACES

    BRACES          shift and go to state 52

    function_call                  shift and go to state 53

state 20

    (61) do_while_statute -> DO . do_while_init code_statute BRACES WHILE L_PAR operation do_while_end
    (62) do_while_init -> . BRACES

    BRACES          shift and go to state 55

    do_while_init                  shift and go to state 54

state 21

    (1) program -> program_2 inicioMain BRACES code_statute . BRACES

    BRACES          shift and go to state 56


state 22

    (58) while_statute -> WHILE . L_PAR operation while_init BRACES code_statute while_end

    L_PAR           shift and go to state 57


state 23

    (11) statute -> if_statute .

    ID              reduce using rule 11 (statute -> if_statute .)
    PRINT           reduce using rule 11 (statute -> if_statute .)
    IF              reduce using rule 11 (statute -> if_statute .)
    WHILE           reduce using rule 11 (statute -> if_statute .)
    DO              reduce using rule 11 (statute -> if_statute .)
    TYPE_INT        reduce using rule 11 (statute -> if_statute .)
    TYPE_FLOAT      reduce using rule 11 (statute -> if_statute .)
    TYPE_BOOLEAN    reduce using rule 11 (statute -> if_statute .)
    TYPE_VOID       reduce using rule 11 (statute -> if_statute .)
    BRACES          reduce using rule 11 (statute -> if_statute .)
    RETURN          reduce using rule 11 (statute -> if_statute .)


state 24

    (39) print_statute -> PRINT . L_PAR operation R_PAR END_LINE

    L_PAR           shift and go to state 58


state 25

    (13) statute -> do_while_statute .

    ID              reduce using rule 13 (statute -> do_while_statute .)
    PRINT           reduce using rule 13 (statute -> do_while_statute .)
    IF              reduce using rule 13 (statute -> do_while_statute .)
    WHILE           reduce using rule 13 (statute -> do_while_statute .)
    DO              reduce using rule 13 (statute -> do_while_statute .)
    TYPE_INT        reduce using rule 13 (statute -> do_while_statute .)
    TYPE_FLOAT      reduce using rule 13 (statute -> do_while_statute .)
    TYPE_BOOLEAN    reduce using rule 13 (statute -> do_while_statute .)
    TYPE_VOID       reduce using rule 13 (statute -> do_while_statute .)
    BRACES          reduce using rule 13 (statute -> do_while_statute .)
    RETURN          reduce using rule 13 (statute -> do_while_statute .)


state 26

    (10) statute -> ID . statute_2
    (15) statute_2 -> . L_PAR const_id_3 R_PAR END_LINE
    (16) statute_2 -> . assign_statute ASSIGN statute_aux
    (40) assign_statute -> . L_BRACKET exp R_BRACKET
    (41) assign_statute -> .

    L_PAR           shift and go to state 60
    L_BRACKET       shift and go to state 61
    ASSIGN          reduce using rule 41 (assign_statute -> .)

    assign_statute                 shift and go to state 59
    statute_2                      shift and go to state 62

state 27

    (14) statute -> type . ID variable_dec

    ID              shift and go to state 63


state 28

    (12) statute -> while_statute .

    ID              reduce using rule 12 (statute -> while_statute .)
    PRINT           reduce using rule 12 (statute -> while_statute .)
    IF              reduce using rule 12 (statute -> while_statute .)
    WHILE           reduce using rule 12 (statute -> while_statute .)
    DO              reduce using rule 12 (statute -> while_statute .)
    TYPE_INT        reduce using rule 12 (statute -> while_statute .)
    TYPE_FLOAT      reduce using rule 12 (statute -> while_statute .)
    TYPE_BOOLEAN    reduce using rule 12 (statute -> while_statute .)
    TYPE_VOID       reduce using rule 12 (statute -> while_statute .)
    BRACES          reduce using rule 12 (statute -> while_statute .)
    RETURN          reduce using rule 12 (statute -> while_statute .)


state 29

    (64) if_statute -> IF . L_PAR operation if_init BRACES code_statute BRACES if_statute_aux

    L_PAR           shift and go to state 64


state 30

    (7) code_statute -> statute . code_statute
    (7) code_statute -> . statute code_statute
    (8) code_statute -> .
    (9) statute -> . print_statute
    (10) statute -> . ID statute_2
    (11) statute -> . if_statute
    (12) statute -> . while_statute
    (13) statute -> . do_while_statute
    (14) statute -> . type ID variable_dec
    (39) print_statute -> . PRINT L_PAR operation R_PAR END_LINE
    (64) if_statute -> . IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux
    (58) while_statute -> . WHILE L_PAR operation while_init BRACES code_statute while_end
    (61) do_while_statute -> . DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end
    (84) type -> . TYPE_INT
    (85) type -> . TYPE_FLOAT
    (86) type -> . TYPE_BOOLEAN
    (87) type -> . TYPE_VOID

    BRACES          reduce using rule 8 (code_statute -> .)
    RETURN          reduce using rule 8 (code_statute -> .)
    ID              shift and go to state 26
    PRINT           shift and go to state 24
    IF              shift and go to state 29
    WHILE           shift and go to state 22
    DO              shift and go to state 20
    TYPE_INT        shift and go to state 1
    TYPE_FLOAT      shift and go to state 2
    TYPE_BOOLEAN    shift and go to state 5
    TYPE_VOID       shift and go to state 7

    statute                        shift and go to state 30
    type                           shift and go to state 27
    code_statute                   shift and go to state 65
    do_while_statute               shift and go to state 25
    print_statute                  shift and go to state 31
    if_statute                     shift and go to state 23
    while_statute                  shift and go to state 28

state 31

    (9) statute -> print_statute .

    ID              reduce using rule 9 (statute -> print_statute .)
    PRINT           reduce using rule 9 (statute -> print_statute .)
    IF              reduce using rule 9 (statute -> print_statute .)
    WHILE           reduce using rule 9 (statute -> print_statute .)
    DO              reduce using rule 9 (statute -> print_statute .)
    TYPE_INT        reduce using rule 9 (statute -> print_statute .)
    TYPE_FLOAT      reduce using rule 9 (statute -> print_statute .)
    TYPE_BOOLEAN    reduce using rule 9 (statute -> print_statute .)
    TYPE_VOID       reduce using rule 9 (statute -> print_statute .)
    BRACES          reduce using rule 9 (statute -> print_statute .)
    RETURN          reduce using rule 9 (statute -> print_statute .)


state 32

    (33) variable_dec -> variable_dec_2 END_LINE .

    TYPE_INT        reduce using rule 33 (variable_dec -> variable_dec_2 END_LINE .)
    TYPE_FLOAT      reduce using rule 33 (variable_dec -> variable_dec_2 END_LINE .)
    TYPE_BOOLEAN    reduce using rule 33 (variable_dec -> variable_dec_2 END_LINE .)
    TYPE_VOID       reduce using rule 33 (variable_dec -> variable_dec_2 END_LINE .)
    MAIN            reduce using rule 33 (variable_dec -> variable_dec_2 END_LINE .)
    ID              reduce using rule 33 (variable_dec -> variable_dec_2 END_LINE .)
    PRINT           reduce using rule 33 (variable_dec -> variable_dec_2 END_LINE .)
    IF              reduce using rule 33 (variable_dec -> variable_dec_2 END_LINE .)
    WHILE           reduce using rule 33 (variable_dec -> variable_dec_2 END_LINE .)
    DO              reduce using rule 33 (variable_dec -> variable_dec_2 END_LINE .)
    BRACES          reduce using rule 33 (variable_dec -> variable_dec_2 END_LINE .)
    RETURN          reduce using rule 33 (variable_dec -> variable_dec_2 END_LINE .)


state 33

    (37) variable_dec_aux -> COMMA . ID variable_dec_2

    ID              shift and go to state 66


state 34

    (34) variable_dec_2 -> variable_dec_3 variable_dec_aux .

    END_LINE        reduce using rule 34 (variable_dec_2 -> variable_dec_3 variable_dec_aux .)


state 35

    (20) function_id -> L_PAR function_id_2 . R_PAR

    R_PAR           shift and go to state 67


state 36

    (21) function_id_2 -> type . params_id function_id_aux function_id_3
    (27) params_id -> . ID

    ID              shift and go to state 69

    params_id                      shift and go to state 68

state 37

    (52) exp -> term . exp_aux
    (53) exp_aux -> . AS_OPERATOR exp
    (54) exp_aux -> .

    AS_OPERATOR     shift and go to state 70
    R_BRACKET       reduce using rule 54 (exp_aux -> .)
    LOGIC_OPERATOR  reduce using rule 54 (exp_aux -> .)
    R_PAR           reduce using rule 54 (exp_aux -> .)
    AO_OPERATOR     reduce using rule 54 (exp_aux -> .)
    END_LINE        reduce using rule 54 (exp_aux -> .)

    exp_aux                        shift and go to state 71

state 38

    (74) const_float -> FLOAT .

    MD_OPERATOR     reduce using rule 74 (const_float -> FLOAT .)
    AS_OPERATOR     reduce using rule 74 (const_float -> FLOAT .)
    R_BRACKET       reduce using rule 74 (const_float -> FLOAT .)
    LOGIC_OPERATOR  reduce using rule 74 (const_float -> FLOAT .)
    R_PAR           reduce using rule 74 (const_float -> FLOAT .)
    AO_OPERATOR     reduce using rule 74 (const_float -> FLOAT .)
    END_LINE        reduce using rule 74 (const_float -> FLOAT .)
    COMMA           reduce using rule 74 (const_float -> FLOAT .)


state 39

    (69) const_var -> const_int .

    COMMA           reduce using rule 69 (const_var -> const_int .)
    R_PAR           reduce using rule 69 (const_var -> const_int .)
    MD_OPERATOR     reduce using rule 69 (const_var -> const_int .)
    AS_OPERATOR     reduce using rule 69 (const_var -> const_int .)
    LOGIC_OPERATOR  reduce using rule 69 (const_var -> const_int .)
    AO_OPERATOR     reduce using rule 69 (const_var -> const_int .)
    R_BRACKET       reduce using rule 69 (const_var -> const_int .)
    END_LINE        reduce using rule 69 (const_var -> const_int .)


state 40

    (51) factor -> AS_OPERATOR . const_var
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    const_var                      shift and go to state 72
    const_int                      shift and go to state 39
    const_float                    shift and go to state 48
    const_id                       shift and go to state 50
    const_boolean                  shift and go to state 41

state 41

    (71) const_var -> const_boolean .

    COMMA           reduce using rule 71 (const_var -> const_boolean .)
    R_PAR           reduce using rule 71 (const_var -> const_boolean .)
    MD_OPERATOR     reduce using rule 71 (const_var -> const_boolean .)
    AS_OPERATOR     reduce using rule 71 (const_var -> const_boolean .)
    LOGIC_OPERATOR  reduce using rule 71 (const_var -> const_boolean .)
    AO_OPERATOR     reduce using rule 71 (const_var -> const_boolean .)
    R_BRACKET       reduce using rule 71 (const_var -> const_boolean .)
    END_LINE        reduce using rule 71 (const_var -> const_boolean .)


state 42

    (49) factor -> L_PAR . expression R_PAR
    (46) expression -> . exp expression_aux
    (52) exp -> . term exp_aux
    (55) term -> . factor term_aux
    (49) factor -> . L_PAR expression R_PAR
    (50) factor -> . const_var
    (51) factor -> . AS_OPERATOR const_var
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    L_PAR           shift and go to state 42
    AS_OPERATOR     shift and go to state 40
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    term                           shift and go to state 37
    const_int                      shift and go to state 39
    const_var                      shift and go to state 44
    const_boolean                  shift and go to state 41
    exp                            shift and go to state 73
    factor                         shift and go to state 46
    const_float                    shift and go to state 48
    const_id                       shift and go to state 50
    expression                     shift and go to state 74

state 43

    (75) const_boolean -> BOOLEAN .

    MD_OPERATOR     reduce using rule 75 (const_boolean -> BOOLEAN .)
    AS_OPERATOR     reduce using rule 75 (const_boolean -> BOOLEAN .)
    R_BRACKET       reduce using rule 75 (const_boolean -> BOOLEAN .)
    END_LINE        reduce using rule 75 (const_boolean -> BOOLEAN .)
    COMMA           reduce using rule 75 (const_boolean -> BOOLEAN .)
    R_PAR           reduce using rule 75 (const_boolean -> BOOLEAN .)
    LOGIC_OPERATOR  reduce using rule 75 (const_boolean -> BOOLEAN .)
    AO_OPERATOR     reduce using rule 75 (const_boolean -> BOOLEAN .)


state 44

    (50) factor -> const_var .

    MD_OPERATOR     reduce using rule 50 (factor -> const_var .)
    AS_OPERATOR     reduce using rule 50 (factor -> const_var .)
    LOGIC_OPERATOR  reduce using rule 50 (factor -> const_var .)
    AO_OPERATOR     reduce using rule 50 (factor -> const_var .)
    END_LINE        reduce using rule 50 (factor -> const_var .)
    R_PAR           reduce using rule 50 (factor -> const_var .)
    R_BRACKET       reduce using rule 50 (factor -> const_var .)


state 45

    (35) variable_dec_3 -> L_BRACKET exp . R_BRACKET

    R_BRACKET       shift and go to state 75


state 46

    (55) term -> factor . term_aux
    (56) term_aux -> . MD_OPERATOR term
    (57) term_aux -> .

    MD_OPERATOR     shift and go to state 76
    AS_OPERATOR     reduce using rule 57 (term_aux -> .)
    R_BRACKET       reduce using rule 57 (term_aux -> .)
    LOGIC_OPERATOR  reduce using rule 57 (term_aux -> .)
    R_PAR           reduce using rule 57 (term_aux -> .)
    AO_OPERATOR     reduce using rule 57 (term_aux -> .)
    END_LINE        reduce using rule 57 (term_aux -> .)

    term_aux                       shift and go to state 77

state 47

    (73) const_int -> INT .

    END_LINE        reduce using rule 73 (const_int -> INT .)
    MD_OPERATOR     reduce using rule 73 (const_int -> INT .)
    AS_OPERATOR     reduce using rule 73 (const_int -> INT .)
    R_BRACKET       reduce using rule 73 (const_int -> INT .)
    LOGIC_OPERATOR  reduce using rule 73 (const_int -> INT .)
    R_PAR           reduce using rule 73 (const_int -> INT .)
    AO_OPERATOR     reduce using rule 73 (const_int -> INT .)
    COMMA           reduce using rule 73 (const_int -> INT .)


state 48

    (70) const_var -> const_float .

    COMMA           reduce using rule 70 (const_var -> const_float .)
    R_PAR           reduce using rule 70 (const_var -> const_float .)
    MD_OPERATOR     reduce using rule 70 (const_var -> const_float .)
    AS_OPERATOR     reduce using rule 70 (const_var -> const_float .)
    LOGIC_OPERATOR  reduce using rule 70 (const_var -> const_float .)
    AO_OPERATOR     reduce using rule 70 (const_var -> const_float .)
    R_BRACKET       reduce using rule 70 (const_var -> const_float .)
    END_LINE        reduce using rule 70 (const_var -> const_float .)


state 49

    (76) const_id -> ID . const_id_2
    (77) const_id_2 -> . L_BRACKET exp R_BRACKET
    (78) const_id_2 -> . L_PAR const_id_3 R_PAR
    (79) const_id_2 -> .

    L_BRACKET       shift and go to state 80
    L_PAR           shift and go to state 79
    MD_OPERATOR     reduce using rule 79 (const_id_2 -> .)
    AS_OPERATOR     reduce using rule 79 (const_id_2 -> .)
    R_BRACKET       reduce using rule 79 (const_id_2 -> .)
    LOGIC_OPERATOR  reduce using rule 79 (const_id_2 -> .)
    R_PAR           reduce using rule 79 (const_id_2 -> .)
    AO_OPERATOR     reduce using rule 79 (const_id_2 -> .)
    END_LINE        reduce using rule 79 (const_id_2 -> .)
    COMMA           reduce using rule 79 (const_id_2 -> .)

    const_id_2                     shift and go to state 78

state 50

    (72) const_var -> const_id .

    COMMA           reduce using rule 72 (const_var -> const_id .)
    R_PAR           reduce using rule 72 (const_var -> const_id .)
    MD_OPERATOR     reduce using rule 72 (const_var -> const_id .)
    AS_OPERATOR     reduce using rule 72 (const_var -> const_id .)
    LOGIC_OPERATOR  reduce using rule 72 (const_var -> const_id .)
    AO_OPERATOR     reduce using rule 72 (const_var -> const_id .)
    R_BRACKET       reduce using rule 72 (const_var -> const_id .)
    END_LINE        reduce using rule 72 (const_var -> const_id .)


state 51

    (3) program_2 -> type ID program_aux program_2 .

    MAIN            reduce using rule 3 (program_2 -> type ID program_aux program_2 .)


state 52

    (29) function_call -> BRACES .

    ID              reduce using rule 29 (function_call -> BRACES .)
    PRINT           reduce using rule 29 (function_call -> BRACES .)
    IF              reduce using rule 29 (function_call -> BRACES .)
    WHILE           reduce using rule 29 (function_call -> BRACES .)
    DO              reduce using rule 29 (function_call -> BRACES .)
    TYPE_INT        reduce using rule 29 (function_call -> BRACES .)
    TYPE_FLOAT      reduce using rule 29 (function_call -> BRACES .)
    TYPE_BOOLEAN    reduce using rule 29 (function_call -> BRACES .)
    TYPE_VOID       reduce using rule 29 (function_call -> BRACES .)
    RETURN          reduce using rule 29 (function_call -> BRACES .)


state 53

    (19) function_dec -> function_id function_call . code_statute return_statute BRACES
    (7) code_statute -> . statute code_statute
    (8) code_statute -> .
    (9) statute -> . print_statute
    (10) statute -> . ID statute_2
    (11) statute -> . if_statute
    (12) statute -> . while_statute
    (13) statute -> . do_while_statute
    (14) statute -> . type ID variable_dec
    (39) print_statute -> . PRINT L_PAR operation R_PAR END_LINE
    (64) if_statute -> . IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux
    (58) while_statute -> . WHILE L_PAR operation while_init BRACES code_statute while_end
    (61) do_while_statute -> . DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end
    (84) type -> . TYPE_INT
    (85) type -> . TYPE_FLOAT
    (86) type -> . TYPE_BOOLEAN
    (87) type -> . TYPE_VOID

    RETURN          reduce using rule 8 (code_statute -> .)
    ID              shift and go to state 26
    PRINT           shift and go to state 24
    IF              shift and go to state 29
    WHILE           shift and go to state 22
    DO              shift and go to state 20
    TYPE_INT        shift and go to state 1
    TYPE_FLOAT      shift and go to state 2
    TYPE_BOOLEAN    shift and go to state 5
    TYPE_VOID       shift and go to state 7

    statute                        shift and go to state 30
    print_statute                  shift and go to state 31
    type                           shift and go to state 27
    code_statute                   shift and go to state 81
    if_statute                     shift and go to state 23
    do_while_statute               shift and go to state 25
    while_statute                  shift and go to state 28

state 54

    (61) do_while_statute -> DO do_while_init . code_statute BRACES WHILE L_PAR operation do_while_end
    (7) code_statute -> . statute code_statute
    (8) code_statute -> .
    (9) statute -> . print_statute
    (10) statute -> . ID statute_2
    (11) statute -> . if_statute
    (12) statute -> . while_statute
    (13) statute -> . do_while_statute
    (14) statute -> . type ID variable_dec
    (39) print_statute -> . PRINT L_PAR operation R_PAR END_LINE
    (64) if_statute -> . IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux
    (58) while_statute -> . WHILE L_PAR operation while_init BRACES code_statute while_end
    (61) do_while_statute -> . DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end
    (84) type -> . TYPE_INT
    (85) type -> . TYPE_FLOAT
    (86) type -> . TYPE_BOOLEAN
    (87) type -> . TYPE_VOID

    BRACES          reduce using rule 8 (code_statute -> .)
    ID              shift and go to state 26
    PRINT           shift and go to state 24
    IF              shift and go to state 29
    WHILE           shift and go to state 22
    DO              shift and go to state 20
    TYPE_INT        shift and go to state 1
    TYPE_FLOAT      shift and go to state 2
    TYPE_BOOLEAN    shift and go to state 5
    TYPE_VOID       shift and go to state 7

    statute                        shift and go to state 30
    print_statute                  shift and go to state 31
    type                           shift and go to state 27
    code_statute                   shift and go to state 82
    do_while_statute               shift and go to state 25
    if_statute                     shift and go to state 23
    while_statute                  shift and go to state 28

state 55

    (62) do_while_init -> BRACES .

    ID              reduce using rule 62 (do_while_init -> BRACES .)
    PRINT           reduce using rule 62 (do_while_init -> BRACES .)
    IF              reduce using rule 62 (do_while_init -> BRACES .)
    WHILE           reduce using rule 62 (do_while_init -> BRACES .)
    DO              reduce using rule 62 (do_while_init -> BRACES .)
    TYPE_INT        reduce using rule 62 (do_while_init -> BRACES .)
    TYPE_FLOAT      reduce using rule 62 (do_while_init -> BRACES .)
    TYPE_BOOLEAN    reduce using rule 62 (do_while_init -> BRACES .)
    TYPE_VOID       reduce using rule 62 (do_while_init -> BRACES .)
    BRACES          reduce using rule 62 (do_while_init -> BRACES .)


state 56

    (1) program -> program_2 inicioMain BRACES code_statute BRACES .

    $end            reduce using rule 1 (program -> program_2 inicioMain BRACES code_statute BRACES .)


state 57

    (58) while_statute -> WHILE L_PAR . operation while_init BRACES code_statute while_end
    (43) operation -> . expression operation_aux
    (46) expression -> . exp expression_aux
    (52) exp -> . term exp_aux
    (55) term -> . factor term_aux
    (49) factor -> . L_PAR expression R_PAR
    (50) factor -> . const_var
    (51) factor -> . AS_OPERATOR const_var
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    L_PAR           shift and go to state 42
    AS_OPERATOR     shift and go to state 40
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    term                           shift and go to state 37
    exp                            shift and go to state 73
    const_int                      shift and go to state 39
    const_var                      shift and go to state 44
    const_boolean                  shift and go to state 41
    factor                         shift and go to state 46
    const_float                    shift and go to state 48
    operation                      shift and go to state 83
    const_id                       shift and go to state 50
    expression                     shift and go to state 84

state 58

    (39) print_statute -> PRINT L_PAR . operation R_PAR END_LINE
    (43) operation -> . expression operation_aux
    (46) expression -> . exp expression_aux
    (52) exp -> . term exp_aux
    (55) term -> . factor term_aux
    (49) factor -> . L_PAR expression R_PAR
    (50) factor -> . const_var
    (51) factor -> . AS_OPERATOR const_var
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    L_PAR           shift and go to state 42
    AS_OPERATOR     shift and go to state 40
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    term                           shift and go to state 37
    const_int                      shift and go to state 39
    const_var                      shift and go to state 44
    const_boolean                  shift and go to state 41
    exp                            shift and go to state 73
    factor                         shift and go to state 46
    const_float                    shift and go to state 48
    operation                      shift and go to state 85
    const_id                       shift and go to state 50
    expression                     shift and go to state 84

state 59

    (16) statute_2 -> assign_statute . ASSIGN statute_aux

    ASSIGN          shift and go to state 86


state 60

    (15) statute_2 -> L_PAR . const_id_3 R_PAR END_LINE
    (80) const_id_3 -> . const_var const_id_aux
    (81) const_id_3 -> .
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    R_PAR           reduce using rule 81 (const_id_3 -> .)
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    const_id_3                     shift and go to state 87
    const_var                      shift and go to state 88
    const_int                      shift and go to state 39
    const_float                    shift and go to state 48
    const_id                       shift and go to state 50
    const_boolean                  shift and go to state 41

state 61

    (40) assign_statute -> L_BRACKET . exp R_BRACKET
    (52) exp -> . term exp_aux
    (55) term -> . factor term_aux
    (49) factor -> . L_PAR expression R_PAR
    (50) factor -> . const_var
    (51) factor -> . AS_OPERATOR const_var
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    L_PAR           shift and go to state 42
    AS_OPERATOR     shift and go to state 40
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    term                           shift and go to state 37
    const_int                      shift and go to state 39
    const_var                      shift and go to state 44
    const_boolean                  shift and go to state 41
    exp                            shift and go to state 89
    factor                         shift and go to state 46
    const_float                    shift and go to state 48
    const_id                       shift and go to state 50

state 62

    (10) statute -> ID statute_2 .

    ID              reduce using rule 10 (statute -> ID statute_2 .)
    PRINT           reduce using rule 10 (statute -> ID statute_2 .)
    IF              reduce using rule 10 (statute -> ID statute_2 .)
    WHILE           reduce using rule 10 (statute -> ID statute_2 .)
    DO              reduce using rule 10 (statute -> ID statute_2 .)
    TYPE_INT        reduce using rule 10 (statute -> ID statute_2 .)
    TYPE_FLOAT      reduce using rule 10 (statute -> ID statute_2 .)
    TYPE_BOOLEAN    reduce using rule 10 (statute -> ID statute_2 .)
    TYPE_VOID       reduce using rule 10 (statute -> ID statute_2 .)
    BRACES          reduce using rule 10 (statute -> ID statute_2 .)
    RETURN          reduce using rule 10 (statute -> ID statute_2 .)


state 63

    (14) statute -> type ID . variable_dec
    (33) variable_dec -> . variable_dec_2 END_LINE
    (34) variable_dec_2 -> . variable_dec_3 variable_dec_aux
    (35) variable_dec_3 -> . L_BRACKET exp R_BRACKET
    (36) variable_dec_3 -> .

    L_BRACKET       shift and go to state 16
    COMMA           reduce using rule 36 (variable_dec_3 -> .)
    END_LINE        reduce using rule 36 (variable_dec_3 -> .)

    variable_dec_2                 shift and go to state 12
    variable_dec_3                 shift and go to state 13
    variable_dec                   shift and go to state 90

state 64

    (64) if_statute -> IF L_PAR . operation if_init BRACES code_statute BRACES if_statute_aux
    (43) operation -> . expression operation_aux
    (46) expression -> . exp expression_aux
    (52) exp -> . term exp_aux
    (55) term -> . factor term_aux
    (49) factor -> . L_PAR expression R_PAR
    (50) factor -> . const_var
    (51) factor -> . AS_OPERATOR const_var
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    L_PAR           shift and go to state 42
    AS_OPERATOR     shift and go to state 40
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    term                           shift and go to state 37
    const_int                      shift and go to state 39
    const_var                      shift and go to state 44
    const_boolean                  shift and go to state 41
    exp                            shift and go to state 73
    factor                         shift and go to state 46
    const_float                    shift and go to state 48
    operation                      shift and go to state 91
    const_id                       shift and go to state 50
    expression                     shift and go to state 84

state 65

    (7) code_statute -> statute code_statute .

    BRACES          reduce using rule 7 (code_statute -> statute code_statute .)
    RETURN          reduce using rule 7 (code_statute -> statute code_statute .)


state 66

    (37) variable_dec_aux -> COMMA ID . variable_dec_2
    (34) variable_dec_2 -> . variable_dec_3 variable_dec_aux
    (35) variable_dec_3 -> . L_BRACKET exp R_BRACKET
    (36) variable_dec_3 -> .

    L_BRACKET       shift and go to state 16
    COMMA           reduce using rule 36 (variable_dec_3 -> .)
    END_LINE        reduce using rule 36 (variable_dec_3 -> .)

    variable_dec_2                 shift and go to state 92
    variable_dec_3                 shift and go to state 13

state 67

    (20) function_id -> L_PAR function_id_2 R_PAR .

    BRACES          reduce using rule 20 (function_id -> L_PAR function_id_2 R_PAR .)


state 68

    (21) function_id_2 -> type params_id . function_id_aux function_id_3
    (25) function_id_aux -> . L_BRACKET exp R_BRACKET
    (26) function_id_aux -> .

    L_BRACKET       shift and go to state 94
    COMMA           reduce using rule 26 (function_id_aux -> .)
    R_PAR           reduce using rule 26 (function_id_aux -> .)

    function_id_aux                shift and go to state 93

state 69

    (27) params_id -> ID .

    L_BRACKET       reduce using rule 27 (params_id -> ID .)
    COMMA           reduce using rule 27 (params_id -> ID .)
    R_PAR           reduce using rule 27 (params_id -> ID .)


state 70

    (53) exp_aux -> AS_OPERATOR . exp
    (52) exp -> . term exp_aux
    (55) term -> . factor term_aux
    (49) factor -> . L_PAR expression R_PAR
    (50) factor -> . const_var
    (51) factor -> . AS_OPERATOR const_var
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    L_PAR           shift and go to state 42
    AS_OPERATOR     shift and go to state 40
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    term                           shift and go to state 37
    const_int                      shift and go to state 39
    const_var                      shift and go to state 44
    const_boolean                  shift and go to state 41
    exp                            shift and go to state 95
    factor                         shift and go to state 46
    const_float                    shift and go to state 48
    const_id                       shift and go to state 50

state 71

    (52) exp -> term exp_aux .

    LOGIC_OPERATOR  reduce using rule 52 (exp -> term exp_aux .)
    AO_OPERATOR     reduce using rule 52 (exp -> term exp_aux .)
    END_LINE        reduce using rule 52 (exp -> term exp_aux .)
    R_PAR           reduce using rule 52 (exp -> term exp_aux .)
    R_BRACKET       reduce using rule 52 (exp -> term exp_aux .)


state 72

    (51) factor -> AS_OPERATOR const_var .

    MD_OPERATOR     reduce using rule 51 (factor -> AS_OPERATOR const_var .)
    AS_OPERATOR     reduce using rule 51 (factor -> AS_OPERATOR const_var .)
    LOGIC_OPERATOR  reduce using rule 51 (factor -> AS_OPERATOR const_var .)
    AO_OPERATOR     reduce using rule 51 (factor -> AS_OPERATOR const_var .)
    END_LINE        reduce using rule 51 (factor -> AS_OPERATOR const_var .)
    R_PAR           reduce using rule 51 (factor -> AS_OPERATOR const_var .)
    R_BRACKET       reduce using rule 51 (factor -> AS_OPERATOR const_var .)


state 73

    (46) expression -> exp . expression_aux
    (47) expression_aux -> . LOGIC_OPERATOR exp
    (48) expression_aux -> .

    LOGIC_OPERATOR  shift and go to state 97
    R_PAR           reduce using rule 48 (expression_aux -> .)
    AO_OPERATOR     reduce using rule 48 (expression_aux -> .)
    END_LINE        reduce using rule 48 (expression_aux -> .)

    expression_aux                 shift and go to state 96

state 74

    (49) factor -> L_PAR expression . R_PAR

    R_PAR           shift and go to state 98


state 75

    (35) variable_dec_3 -> L_BRACKET exp R_BRACKET .

    COMMA           reduce using rule 35 (variable_dec_3 -> L_BRACKET exp R_BRACKET .)
    END_LINE        reduce using rule 35 (variable_dec_3 -> L_BRACKET exp R_BRACKET .)


state 76

    (56) term_aux -> MD_OPERATOR . term
    (55) term -> . factor term_aux
    (49) factor -> . L_PAR expression R_PAR
    (50) factor -> . const_var
    (51) factor -> . AS_OPERATOR const_var
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    L_PAR           shift and go to state 42
    AS_OPERATOR     shift and go to state 40
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    term                           shift and go to state 99
    const_var                      shift and go to state 44
    const_int                      shift and go to state 39
    factor                         shift and go to state 46
    const_float                    shift and go to state 48
    const_id                       shift and go to state 50
    const_boolean                  shift and go to state 41

state 77

    (55) term -> factor term_aux .

    AS_OPERATOR     reduce using rule 55 (term -> factor term_aux .)
    LOGIC_OPERATOR  reduce using rule 55 (term -> factor term_aux .)
    AO_OPERATOR     reduce using rule 55 (term -> factor term_aux .)
    R_PAR           reduce using rule 55 (term -> factor term_aux .)
    END_LINE        reduce using rule 55 (term -> factor term_aux .)
    R_BRACKET       reduce using rule 55 (term -> factor term_aux .)


state 78

    (76) const_id -> ID const_id_2 .

    MD_OPERATOR     reduce using rule 76 (const_id -> ID const_id_2 .)
    AS_OPERATOR     reduce using rule 76 (const_id -> ID const_id_2 .)
    R_BRACKET       reduce using rule 76 (const_id -> ID const_id_2 .)
    R_PAR           reduce using rule 76 (const_id -> ID const_id_2 .)
    AO_OPERATOR     reduce using rule 76 (const_id -> ID const_id_2 .)
    END_LINE        reduce using rule 76 (const_id -> ID const_id_2 .)
    LOGIC_OPERATOR  reduce using rule 76 (const_id -> ID const_id_2 .)
    COMMA           reduce using rule 76 (const_id -> ID const_id_2 .)


state 79

    (78) const_id_2 -> L_PAR . const_id_3 R_PAR
    (80) const_id_3 -> . const_var const_id_aux
    (81) const_id_3 -> .
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    R_PAR           reduce using rule 81 (const_id_3 -> .)
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    const_id_3                     shift and go to state 100
    const_var                      shift and go to state 88
    const_int                      shift and go to state 39
    const_float                    shift and go to state 48
    const_id                       shift and go to state 50
    const_boolean                  shift and go to state 41

state 80

    (77) const_id_2 -> L_BRACKET . exp R_BRACKET
    (52) exp -> . term exp_aux
    (55) term -> . factor term_aux
    (49) factor -> . L_PAR expression R_PAR
    (50) factor -> . const_var
    (51) factor -> . AS_OPERATOR const_var
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    L_PAR           shift and go to state 42
    AS_OPERATOR     shift and go to state 40
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    term                           shift and go to state 37
    const_int                      shift and go to state 39
    const_var                      shift and go to state 44
    const_boolean                  shift and go to state 41
    exp                            shift and go to state 101
    factor                         shift and go to state 46
    const_float                    shift and go to state 48
    const_id                       shift and go to state 50

state 81

    (19) function_dec -> function_id function_call code_statute . return_statute BRACES
    (30) return_statute -> . RETURN return_statute_aux END_LINE

    RETURN          shift and go to state 102

    return_statute                 shift and go to state 103

state 82

    (61) do_while_statute -> DO do_while_init code_statute . BRACES WHILE L_PAR operation do_while_end

    BRACES          shift and go to state 104


state 83

    (58) while_statute -> WHILE L_PAR operation . while_init BRACES code_statute while_end
    (59) while_init -> . R_PAR

    R_PAR           shift and go to state 106

    while_init                     shift and go to state 105

state 84

    (43) operation -> expression . operation_aux
    (44) operation_aux -> . AO_OPERATOR operation
    (45) operation_aux -> .

    AO_OPERATOR     shift and go to state 107
    R_PAR           reduce using rule 45 (operation_aux -> .)
    END_LINE        reduce using rule 45 (operation_aux -> .)

    operation_aux                  shift and go to state 108

state 85

    (39) print_statute -> PRINT L_PAR operation . R_PAR END_LINE

    R_PAR           shift and go to state 109


state 86

    (16) statute_2 -> assign_statute ASSIGN . statute_aux
    (17) statute_aux -> . input_statute
    (18) statute_aux -> . assign_statute_aux END_LINE
    (68) input_statute -> . INPUT L_PAR type R_PAR END_LINE
    (42) assign_statute_aux -> . operation
    (43) operation -> . expression operation_aux
    (46) expression -> . exp expression_aux
    (52) exp -> . term exp_aux
    (55) term -> . factor term_aux
    (49) factor -> . L_PAR expression R_PAR
    (50) factor -> . const_var
    (51) factor -> . AS_OPERATOR const_var
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    INPUT           shift and go to state 112
    L_PAR           shift and go to state 42
    AS_OPERATOR     shift and go to state 40
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    term                           shift and go to state 37
    statute_aux                    shift and go to state 113
    const_int                      shift and go to state 39
    expression                     shift and go to state 84
    const_var                      shift and go to state 44
    assign_statute_aux             shift and go to state 114
    const_boolean                  shift and go to state 41
    exp                            shift and go to state 73
    factor                         shift and go to state 46
    const_float                    shift and go to state 48
    operation                      shift and go to state 111
    const_id                       shift and go to state 50
    input_statute                  shift and go to state 110

state 87

    (15) statute_2 -> L_PAR const_id_3 . R_PAR END_LINE

    R_PAR           shift and go to state 115


state 88

    (80) const_id_3 -> const_var . const_id_aux
    (82) const_id_aux -> . COMMA const_id_3
    (83) const_id_aux -> .

    COMMA           shift and go to state 117
    R_PAR           reduce using rule 83 (const_id_aux -> .)

    const_id_aux                   shift and go to state 116

state 89

    (40) assign_statute -> L_BRACKET exp . R_BRACKET

    R_BRACKET       shift and go to state 118


state 90

    (14) statute -> type ID variable_dec .

    ID              reduce using rule 14 (statute -> type ID variable_dec .)
    PRINT           reduce using rule 14 (statute -> type ID variable_dec .)
    IF              reduce using rule 14 (statute -> type ID variable_dec .)
    WHILE           reduce using rule 14 (statute -> type ID variable_dec .)
    DO              reduce using rule 14 (statute -> type ID variable_dec .)
    TYPE_INT        reduce using rule 14 (statute -> type ID variable_dec .)
    TYPE_FLOAT      reduce using rule 14 (statute -> type ID variable_dec .)
    TYPE_BOOLEAN    reduce using rule 14 (statute -> type ID variable_dec .)
    TYPE_VOID       reduce using rule 14 (statute -> type ID variable_dec .)
    BRACES          reduce using rule 14 (statute -> type ID variable_dec .)
    RETURN          reduce using rule 14 (statute -> type ID variable_dec .)


state 91

    (64) if_statute -> IF L_PAR operation . if_init BRACES code_statute BRACES if_statute_aux
    (88) if_init -> . R_PAR

    R_PAR           shift and go to state 120

    if_init                        shift and go to state 119

state 92

    (37) variable_dec_aux -> COMMA ID variable_dec_2 .

    END_LINE        reduce using rule 37 (variable_dec_aux -> COMMA ID variable_dec_2 .)


state 93

    (21) function_id_2 -> type params_id function_id_aux . function_id_3
    (23) function_id_3 -> . param_aux function_id_2
    (24) function_id_3 -> .
    (28) param_aux -> . COMMA

    R_PAR           reduce using rule 24 (function_id_3 -> .)
    COMMA           shift and go to state 122

    function_id_3                  shift and go to state 121
    param_aux                      shift and go to state 123

state 94

    (25) function_id_aux -> L_BRACKET . exp R_BRACKET
    (52) exp -> . term exp_aux
    (55) term -> . factor term_aux
    (49) factor -> . L_PAR expression R_PAR
    (50) factor -> . const_var
    (51) factor -> . AS_OPERATOR const_var
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    L_PAR           shift and go to state 42
    AS_OPERATOR     shift and go to state 40
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    term                           shift and go to state 37
    const_int                      shift and go to state 39
    const_var                      shift and go to state 44
    const_boolean                  shift and go to state 41
    exp                            shift and go to state 124
    factor                         shift and go to state 46
    const_float                    shift and go to state 48
    const_id                       shift and go to state 50

state 95

    (53) exp_aux -> AS_OPERATOR exp .

    R_BRACKET       reduce using rule 53 (exp_aux -> AS_OPERATOR exp .)
    LOGIC_OPERATOR  reduce using rule 53 (exp_aux -> AS_OPERATOR exp .)
    R_PAR           reduce using rule 53 (exp_aux -> AS_OPERATOR exp .)
    AO_OPERATOR     reduce using rule 53 (exp_aux -> AS_OPERATOR exp .)
    END_LINE        reduce using rule 53 (exp_aux -> AS_OPERATOR exp .)


state 96

    (46) expression -> exp expression_aux .

    AO_OPERATOR     reduce using rule 46 (expression -> exp expression_aux .)
    R_PAR           reduce using rule 46 (expression -> exp expression_aux .)
    END_LINE        reduce using rule 46 (expression -> exp expression_aux .)


state 97

    (47) expression_aux -> LOGIC_OPERATOR . exp
    (52) exp -> . term exp_aux
    (55) term -> . factor term_aux
    (49) factor -> . L_PAR expression R_PAR
    (50) factor -> . const_var
    (51) factor -> . AS_OPERATOR const_var
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    L_PAR           shift and go to state 42
    AS_OPERATOR     shift and go to state 40
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    term                           shift and go to state 37
    const_int                      shift and go to state 39
    const_var                      shift and go to state 44
    const_boolean                  shift and go to state 41
    exp                            shift and go to state 125
    factor                         shift and go to state 46
    const_float                    shift and go to state 48
    const_id                       shift and go to state 50

state 98

    (49) factor -> L_PAR expression R_PAR .

    MD_OPERATOR     reduce using rule 49 (factor -> L_PAR expression R_PAR .)
    AS_OPERATOR     reduce using rule 49 (factor -> L_PAR expression R_PAR .)
    LOGIC_OPERATOR  reduce using rule 49 (factor -> L_PAR expression R_PAR .)
    AO_OPERATOR     reduce using rule 49 (factor -> L_PAR expression R_PAR .)
    END_LINE        reduce using rule 49 (factor -> L_PAR expression R_PAR .)
    R_PAR           reduce using rule 49 (factor -> L_PAR expression R_PAR .)
    R_BRACKET       reduce using rule 49 (factor -> L_PAR expression R_PAR .)


state 99

    (56) term_aux -> MD_OPERATOR term .

    AS_OPERATOR     reduce using rule 56 (term_aux -> MD_OPERATOR term .)
    R_BRACKET       reduce using rule 56 (term_aux -> MD_OPERATOR term .)
    LOGIC_OPERATOR  reduce using rule 56 (term_aux -> MD_OPERATOR term .)
    R_PAR           reduce using rule 56 (term_aux -> MD_OPERATOR term .)
    AO_OPERATOR     reduce using rule 56 (term_aux -> MD_OPERATOR term .)
    END_LINE        reduce using rule 56 (term_aux -> MD_OPERATOR term .)


state 100

    (78) const_id_2 -> L_PAR const_id_3 . R_PAR

    R_PAR           shift and go to state 126


state 101

    (77) const_id_2 -> L_BRACKET exp . R_BRACKET

    R_BRACKET       shift and go to state 127


state 102

    (30) return_statute -> RETURN . return_statute_aux END_LINE
    (31) return_statute_aux -> . const_var
    (32) return_statute_aux -> .
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    END_LINE        reduce using rule 32 (return_statute_aux -> .)
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    const_var                      shift and go to state 128
    return_statute_aux             shift and go to state 129
    const_int                      shift and go to state 39
    const_float                    shift and go to state 48
    const_id                       shift and go to state 50
    const_boolean                  shift and go to state 41

state 103

    (19) function_dec -> function_id function_call code_statute return_statute . BRACES

    BRACES          shift and go to state 130


state 104

    (61) do_while_statute -> DO do_while_init code_statute BRACES . WHILE L_PAR operation do_while_end

    WHILE           shift and go to state 131


state 105

    (58) while_statute -> WHILE L_PAR operation while_init . BRACES code_statute while_end

    BRACES          shift and go to state 132


state 106

    (59) while_init -> R_PAR .

    BRACES          reduce using rule 59 (while_init -> R_PAR .)


state 107

    (44) operation_aux -> AO_OPERATOR . operation
    (43) operation -> . expression operation_aux
    (46) expression -> . exp expression_aux
    (52) exp -> . term exp_aux
    (55) term -> . factor term_aux
    (49) factor -> . L_PAR expression R_PAR
    (50) factor -> . const_var
    (51) factor -> . AS_OPERATOR const_var
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    L_PAR           shift and go to state 42
    AS_OPERATOR     shift and go to state 40
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    term                           shift and go to state 37
    const_int                      shift and go to state 39
    const_var                      shift and go to state 44
    const_boolean                  shift and go to state 41
    exp                            shift and go to state 73
    factor                         shift and go to state 46
    const_float                    shift and go to state 48
    operation                      shift and go to state 133
    const_id                       shift and go to state 50
    expression                     shift and go to state 84

state 108

    (43) operation -> expression operation_aux .

    R_PAR           reduce using rule 43 (operation -> expression operation_aux .)
    END_LINE        reduce using rule 43 (operation -> expression operation_aux .)


state 109

    (39) print_statute -> PRINT L_PAR operation R_PAR . END_LINE

    END_LINE        shift and go to state 134


state 110

    (17) statute_aux -> input_statute .

    ID              reduce using rule 17 (statute_aux -> input_statute .)
    PRINT           reduce using rule 17 (statute_aux -> input_statute .)
    IF              reduce using rule 17 (statute_aux -> input_statute .)
    WHILE           reduce using rule 17 (statute_aux -> input_statute .)
    DO              reduce using rule 17 (statute_aux -> input_statute .)
    TYPE_INT        reduce using rule 17 (statute_aux -> input_statute .)
    TYPE_FLOAT      reduce using rule 17 (statute_aux -> input_statute .)
    TYPE_BOOLEAN    reduce using rule 17 (statute_aux -> input_statute .)
    TYPE_VOID       reduce using rule 17 (statute_aux -> input_statute .)
    BRACES          reduce using rule 17 (statute_aux -> input_statute .)
    RETURN          reduce using rule 17 (statute_aux -> input_statute .)


state 111

    (42) assign_statute_aux -> operation .

    END_LINE        reduce using rule 42 (assign_statute_aux -> operation .)


state 112

    (68) input_statute -> INPUT . L_PAR type R_PAR END_LINE

    L_PAR           shift and go to state 135


state 113

    (16) statute_2 -> assign_statute ASSIGN statute_aux .

    ID              reduce using rule 16 (statute_2 -> assign_statute ASSIGN statute_aux .)
    PRINT           reduce using rule 16 (statute_2 -> assign_statute ASSIGN statute_aux .)
    IF              reduce using rule 16 (statute_2 -> assign_statute ASSIGN statute_aux .)
    WHILE           reduce using rule 16 (statute_2 -> assign_statute ASSIGN statute_aux .)
    DO              reduce using rule 16 (statute_2 -> assign_statute ASSIGN statute_aux .)
    TYPE_INT        reduce using rule 16 (statute_2 -> assign_statute ASSIGN statute_aux .)
    TYPE_FLOAT      reduce using rule 16 (statute_2 -> assign_statute ASSIGN statute_aux .)
    TYPE_BOOLEAN    reduce using rule 16 (statute_2 -> assign_statute ASSIGN statute_aux .)
    TYPE_VOID       reduce using rule 16 (statute_2 -> assign_statute ASSIGN statute_aux .)
    BRACES          reduce using rule 16 (statute_2 -> assign_statute ASSIGN statute_aux .)
    RETURN          reduce using rule 16 (statute_2 -> assign_statute ASSIGN statute_aux .)


state 114

    (18) statute_aux -> assign_statute_aux . END_LINE

    END_LINE        shift and go to state 136


state 115

    (15) statute_2 -> L_PAR const_id_3 R_PAR . END_LINE

    END_LINE        shift and go to state 137


state 116

    (80) const_id_3 -> const_var const_id_aux .

    R_PAR           reduce using rule 80 (const_id_3 -> const_var const_id_aux .)


state 117

    (82) const_id_aux -> COMMA . const_id_3
    (80) const_id_3 -> . const_var const_id_aux
    (81) const_id_3 -> .
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    R_PAR           reduce using rule 81 (const_id_3 -> .)
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    const_id_3                     shift and go to state 138
    const_var                      shift and go to state 88
    const_int                      shift and go to state 39
    const_float                    shift and go to state 48
    const_id                       shift and go to state 50
    const_boolean                  shift and go to state 41

state 118

    (40) assign_statute -> L_BRACKET exp R_BRACKET .

    ASSIGN          reduce using rule 40 (assign_statute -> L_BRACKET exp R_BRACKET .)


state 119

    (64) if_statute -> IF L_PAR operation if_init . BRACES code_statute BRACES if_statute_aux

    BRACES          shift and go to state 139


state 120

    (88) if_init -> R_PAR .

    BRACES          reduce using rule 88 (if_init -> R_PAR .)


state 121

    (21) function_id_2 -> type params_id function_id_aux function_id_3 .

    R_PAR           reduce using rule 21 (function_id_2 -> type params_id function_id_aux function_id_3 .)


state 122

    (28) param_aux -> COMMA .

    TYPE_INT        reduce using rule 28 (param_aux -> COMMA .)
    TYPE_FLOAT      reduce using rule 28 (param_aux -> COMMA .)
    TYPE_BOOLEAN    reduce using rule 28 (param_aux -> COMMA .)
    TYPE_VOID       reduce using rule 28 (param_aux -> COMMA .)
    R_PAR           reduce using rule 28 (param_aux -> COMMA .)


state 123

    (23) function_id_3 -> param_aux . function_id_2
    (21) function_id_2 -> . type params_id function_id_aux function_id_3
    (22) function_id_2 -> .
    (84) type -> . TYPE_INT
    (85) type -> . TYPE_FLOAT
    (86) type -> . TYPE_BOOLEAN
    (87) type -> . TYPE_VOID

    R_PAR           reduce using rule 22 (function_id_2 -> .)
    TYPE_INT        shift and go to state 1
    TYPE_FLOAT      shift and go to state 2
    TYPE_BOOLEAN    shift and go to state 5
    TYPE_VOID       shift and go to state 7

    function_id_2                  shift and go to state 140
    type                           shift and go to state 36

state 124

    (25) function_id_aux -> L_BRACKET exp . R_BRACKET

    R_BRACKET       shift and go to state 141


state 125

    (47) expression_aux -> LOGIC_OPERATOR exp .

    R_PAR           reduce using rule 47 (expression_aux -> LOGIC_OPERATOR exp .)
    AO_OPERATOR     reduce using rule 47 (expression_aux -> LOGIC_OPERATOR exp .)
    END_LINE        reduce using rule 47 (expression_aux -> LOGIC_OPERATOR exp .)


state 126

    (78) const_id_2 -> L_PAR const_id_3 R_PAR .

    MD_OPERATOR     reduce using rule 78 (const_id_2 -> L_PAR const_id_3 R_PAR .)
    AS_OPERATOR     reduce using rule 78 (const_id_2 -> L_PAR const_id_3 R_PAR .)
    R_BRACKET       reduce using rule 78 (const_id_2 -> L_PAR const_id_3 R_PAR .)
    LOGIC_OPERATOR  reduce using rule 78 (const_id_2 -> L_PAR const_id_3 R_PAR .)
    R_PAR           reduce using rule 78 (const_id_2 -> L_PAR const_id_3 R_PAR .)
    AO_OPERATOR     reduce using rule 78 (const_id_2 -> L_PAR const_id_3 R_PAR .)
    END_LINE        reduce using rule 78 (const_id_2 -> L_PAR const_id_3 R_PAR .)
    COMMA           reduce using rule 78 (const_id_2 -> L_PAR const_id_3 R_PAR .)


state 127

    (77) const_id_2 -> L_BRACKET exp R_BRACKET .

    MD_OPERATOR     reduce using rule 77 (const_id_2 -> L_BRACKET exp R_BRACKET .)
    AS_OPERATOR     reduce using rule 77 (const_id_2 -> L_BRACKET exp R_BRACKET .)
    R_BRACKET       reduce using rule 77 (const_id_2 -> L_BRACKET exp R_BRACKET .)
    LOGIC_OPERATOR  reduce using rule 77 (const_id_2 -> L_BRACKET exp R_BRACKET .)
    R_PAR           reduce using rule 77 (const_id_2 -> L_BRACKET exp R_BRACKET .)
    AO_OPERATOR     reduce using rule 77 (const_id_2 -> L_BRACKET exp R_BRACKET .)
    END_LINE        reduce using rule 77 (const_id_2 -> L_BRACKET exp R_BRACKET .)
    COMMA           reduce using rule 77 (const_id_2 -> L_BRACKET exp R_BRACKET .)


state 128

    (31) return_statute_aux -> const_var .

    END_LINE        reduce using rule 31 (return_statute_aux -> const_var .)


state 129

    (30) return_statute -> RETURN return_statute_aux . END_LINE

    END_LINE        shift and go to state 142


state 130

    (19) function_dec -> function_id function_call code_statute return_statute BRACES .

    TYPE_INT        reduce using rule 19 (function_dec -> function_id function_call code_statute return_statute BRACES .)
    TYPE_FLOAT      reduce using rule 19 (function_dec -> function_id function_call code_statute return_statute BRACES .)
    TYPE_BOOLEAN    reduce using rule 19 (function_dec -> function_id function_call code_statute return_statute BRACES .)
    TYPE_VOID       reduce using rule 19 (function_dec -> function_id function_call code_statute return_statute BRACES .)
    MAIN            reduce using rule 19 (function_dec -> function_id function_call code_statute return_statute BRACES .)


state 131

    (61) do_while_statute -> DO do_while_init code_statute BRACES WHILE . L_PAR operation do_while_end

    L_PAR           shift and go to state 143


state 132

    (58) while_statute -> WHILE L_PAR operation while_init BRACES . code_statute while_end
    (7) code_statute -> . statute code_statute
    (8) code_statute -> .
    (9) statute -> . print_statute
    (10) statute -> . ID statute_2
    (11) statute -> . if_statute
    (12) statute -> . while_statute
    (13) statute -> . do_while_statute
    (14) statute -> . type ID variable_dec
    (39) print_statute -> . PRINT L_PAR operation R_PAR END_LINE
    (64) if_statute -> . IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux
    (58) while_statute -> . WHILE L_PAR operation while_init BRACES code_statute while_end
    (61) do_while_statute -> . DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end
    (84) type -> . TYPE_INT
    (85) type -> . TYPE_FLOAT
    (86) type -> . TYPE_BOOLEAN
    (87) type -> . TYPE_VOID

    BRACES          reduce using rule 8 (code_statute -> .)
    ID              shift and go to state 26
    PRINT           shift and go to state 24
    IF              shift and go to state 29
    WHILE           shift and go to state 22
    DO              shift and go to state 20
    TYPE_INT        shift and go to state 1
    TYPE_FLOAT      shift and go to state 2
    TYPE_BOOLEAN    shift and go to state 5
    TYPE_VOID       shift and go to state 7

    statute                        shift and go to state 30
    type                           shift and go to state 27
    code_statute                   shift and go to state 144
    do_while_statute               shift and go to state 25
    print_statute                  shift and go to state 31
    if_statute                     shift and go to state 23
    while_statute                  shift and go to state 28

state 133

    (44) operation_aux -> AO_OPERATOR operation .

    R_PAR           reduce using rule 44 (operation_aux -> AO_OPERATOR operation .)
    END_LINE        reduce using rule 44 (operation_aux -> AO_OPERATOR operation .)


state 134

    (39) print_statute -> PRINT L_PAR operation R_PAR END_LINE .

    ID              reduce using rule 39 (print_statute -> PRINT L_PAR operation R_PAR END_LINE .)
    PRINT           reduce using rule 39 (print_statute -> PRINT L_PAR operation R_PAR END_LINE .)
    IF              reduce using rule 39 (print_statute -> PRINT L_PAR operation R_PAR END_LINE .)
    WHILE           reduce using rule 39 (print_statute -> PRINT L_PAR operation R_PAR END_LINE .)
    DO              reduce using rule 39 (print_statute -> PRINT L_PAR operation R_PAR END_LINE .)
    TYPE_INT        reduce using rule 39 (print_statute -> PRINT L_PAR operation R_PAR END_LINE .)
    TYPE_FLOAT      reduce using rule 39 (print_statute -> PRINT L_PAR operation R_PAR END_LINE .)
    TYPE_BOOLEAN    reduce using rule 39 (print_statute -> PRINT L_PAR operation R_PAR END_LINE .)
    TYPE_VOID       reduce using rule 39 (print_statute -> PRINT L_PAR operation R_PAR END_LINE .)
    BRACES          reduce using rule 39 (print_statute -> PRINT L_PAR operation R_PAR END_LINE .)
    RETURN          reduce using rule 39 (print_statute -> PRINT L_PAR operation R_PAR END_LINE .)


state 135

    (68) input_statute -> INPUT L_PAR . type R_PAR END_LINE
    (84) type -> . TYPE_INT
    (85) type -> . TYPE_FLOAT
    (86) type -> . TYPE_BOOLEAN
    (87) type -> . TYPE_VOID

    TYPE_INT        shift and go to state 1
    TYPE_FLOAT      shift and go to state 2
    TYPE_BOOLEAN    shift and go to state 5
    TYPE_VOID       shift and go to state 7

    type                           shift and go to state 145

state 136

    (18) statute_aux -> assign_statute_aux END_LINE .

    ID              reduce using rule 18 (statute_aux -> assign_statute_aux END_LINE .)
    PRINT           reduce using rule 18 (statute_aux -> assign_statute_aux END_LINE .)
    IF              reduce using rule 18 (statute_aux -> assign_statute_aux END_LINE .)
    WHILE           reduce using rule 18 (statute_aux -> assign_statute_aux END_LINE .)
    DO              reduce using rule 18 (statute_aux -> assign_statute_aux END_LINE .)
    TYPE_INT        reduce using rule 18 (statute_aux -> assign_statute_aux END_LINE .)
    TYPE_FLOAT      reduce using rule 18 (statute_aux -> assign_statute_aux END_LINE .)
    TYPE_BOOLEAN    reduce using rule 18 (statute_aux -> assign_statute_aux END_LINE .)
    TYPE_VOID       reduce using rule 18 (statute_aux -> assign_statute_aux END_LINE .)
    BRACES          reduce using rule 18 (statute_aux -> assign_statute_aux END_LINE .)
    RETURN          reduce using rule 18 (statute_aux -> assign_statute_aux END_LINE .)


state 137

    (15) statute_2 -> L_PAR const_id_3 R_PAR END_LINE .

    ID              reduce using rule 15 (statute_2 -> L_PAR const_id_3 R_PAR END_LINE .)
    PRINT           reduce using rule 15 (statute_2 -> L_PAR const_id_3 R_PAR END_LINE .)
    IF              reduce using rule 15 (statute_2 -> L_PAR const_id_3 R_PAR END_LINE .)
    WHILE           reduce using rule 15 (statute_2 -> L_PAR const_id_3 R_PAR END_LINE .)
    DO              reduce using rule 15 (statute_2 -> L_PAR const_id_3 R_PAR END_LINE .)
    TYPE_INT        reduce using rule 15 (statute_2 -> L_PAR const_id_3 R_PAR END_LINE .)
    TYPE_FLOAT      reduce using rule 15 (statute_2 -> L_PAR const_id_3 R_PAR END_LINE .)
    TYPE_BOOLEAN    reduce using rule 15 (statute_2 -> L_PAR const_id_3 R_PAR END_LINE .)
    TYPE_VOID       reduce using rule 15 (statute_2 -> L_PAR const_id_3 R_PAR END_LINE .)
    BRACES          reduce using rule 15 (statute_2 -> L_PAR const_id_3 R_PAR END_LINE .)
    RETURN          reduce using rule 15 (statute_2 -> L_PAR const_id_3 R_PAR END_LINE .)


state 138

    (82) const_id_aux -> COMMA const_id_3 .

    R_PAR           reduce using rule 82 (const_id_aux -> COMMA const_id_3 .)


state 139

    (64) if_statute -> IF L_PAR operation if_init BRACES . code_statute BRACES if_statute_aux
    (7) code_statute -> . statute code_statute
    (8) code_statute -> .
    (9) statute -> . print_statute
    (10) statute -> . ID statute_2
    (11) statute -> . if_statute
    (12) statute -> . while_statute
    (13) statute -> . do_while_statute
    (14) statute -> . type ID variable_dec
    (39) print_statute -> . PRINT L_PAR operation R_PAR END_LINE
    (64) if_statute -> . IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux
    (58) while_statute -> . WHILE L_PAR operation while_init BRACES code_statute while_end
    (61) do_while_statute -> . DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end
    (84) type -> . TYPE_INT
    (85) type -> . TYPE_FLOAT
    (86) type -> . TYPE_BOOLEAN
    (87) type -> . TYPE_VOID

    BRACES          reduce using rule 8 (code_statute -> .)
    ID              shift and go to state 26
    PRINT           shift and go to state 24
    IF              shift and go to state 29
    WHILE           shift and go to state 22
    DO              shift and go to state 20
    TYPE_INT        shift and go to state 1
    TYPE_FLOAT      shift and go to state 2
    TYPE_BOOLEAN    shift and go to state 5
    TYPE_VOID       shift and go to state 7

    statute                        shift and go to state 30
    code_statute                   shift and go to state 146
    do_while_statute               shift and go to state 25
    print_statute                  shift and go to state 31
    if_statute                     shift and go to state 23
    type                           shift and go to state 27
    while_statute                  shift and go to state 28

state 140

    (23) function_id_3 -> param_aux function_id_2 .

    R_PAR           reduce using rule 23 (function_id_3 -> param_aux function_id_2 .)


state 141

    (25) function_id_aux -> L_BRACKET exp R_BRACKET .

    COMMA           reduce using rule 25 (function_id_aux -> L_BRACKET exp R_BRACKET .)
    R_PAR           reduce using rule 25 (function_id_aux -> L_BRACKET exp R_BRACKET .)


state 142

    (30) return_statute -> RETURN return_statute_aux END_LINE .

    BRACES          reduce using rule 30 (return_statute -> RETURN return_statute_aux END_LINE .)


state 143

    (61) do_while_statute -> DO do_while_init code_statute BRACES WHILE L_PAR . operation do_while_end
    (43) operation -> . expression operation_aux
    (46) expression -> . exp expression_aux
    (52) exp -> . term exp_aux
    (55) term -> . factor term_aux
    (49) factor -> . L_PAR expression R_PAR
    (50) factor -> . const_var
    (51) factor -> . AS_OPERATOR const_var
    (69) const_var -> . const_int
    (70) const_var -> . const_float
    (71) const_var -> . const_boolean
    (72) const_var -> . const_id
    (73) const_int -> . INT
    (74) const_float -> . FLOAT
    (75) const_boolean -> . BOOLEAN
    (76) const_id -> . ID const_id_2

    L_PAR           shift and go to state 42
    AS_OPERATOR     shift and go to state 40
    INT             shift and go to state 47
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 43
    ID              shift and go to state 49

    term                           shift and go to state 37
    const_int                      shift and go to state 39
    const_var                      shift and go to state 44
    const_boolean                  shift and go to state 41
    exp                            shift and go to state 73
    factor                         shift and go to state 46
    const_float                    shift and go to state 48
    operation                      shift and go to state 147
    const_id                       shift and go to state 50
    expression                     shift and go to state 84

state 144

    (58) while_statute -> WHILE L_PAR operation while_init BRACES code_statute . while_end
    (60) while_end -> . BRACES

    BRACES          shift and go to state 149

    while_end                      shift and go to state 148

state 145

    (68) input_statute -> INPUT L_PAR type . R_PAR END_LINE

    R_PAR           shift and go to state 150


state 146

    (64) if_statute -> IF L_PAR operation if_init BRACES code_statute . BRACES if_statute_aux

    BRACES          shift and go to state 151


state 147

    (61) do_while_statute -> DO do_while_init code_statute BRACES WHILE L_PAR operation . do_while_end
    (63) do_while_end -> . R_PAR

    R_PAR           shift and go to state 153

    do_while_end                   shift and go to state 152

state 148

    (58) while_statute -> WHILE L_PAR operation while_init BRACES code_statute while_end .

    ID              reduce using rule 58 (while_statute -> WHILE L_PAR operation while_init BRACES code_statute while_end .)
    PRINT           reduce using rule 58 (while_statute -> WHILE L_PAR operation while_init BRACES code_statute while_end .)
    IF              reduce using rule 58 (while_statute -> WHILE L_PAR operation while_init BRACES code_statute while_end .)
    WHILE           reduce using rule 58 (while_statute -> WHILE L_PAR operation while_init BRACES code_statute while_end .)
    DO              reduce using rule 58 (while_statute -> WHILE L_PAR operation while_init BRACES code_statute while_end .)
    TYPE_INT        reduce using rule 58 (while_statute -> WHILE L_PAR operation while_init BRACES code_statute while_end .)
    TYPE_FLOAT      reduce using rule 58 (while_statute -> WHILE L_PAR operation while_init BRACES code_statute while_end .)
    TYPE_BOOLEAN    reduce using rule 58 (while_statute -> WHILE L_PAR operation while_init BRACES code_statute while_end .)
    TYPE_VOID       reduce using rule 58 (while_statute -> WHILE L_PAR operation while_init BRACES code_statute while_end .)
    BRACES          reduce using rule 58 (while_statute -> WHILE L_PAR operation while_init BRACES code_statute while_end .)
    RETURN          reduce using rule 58 (while_statute -> WHILE L_PAR operation while_init BRACES code_statute while_end .)


state 149

    (60) while_end -> BRACES .

    ID              reduce using rule 60 (while_end -> BRACES .)
    PRINT           reduce using rule 60 (while_end -> BRACES .)
    IF              reduce using rule 60 (while_end -> BRACES .)
    WHILE           reduce using rule 60 (while_end -> BRACES .)
    DO              reduce using rule 60 (while_end -> BRACES .)
    TYPE_INT        reduce using rule 60 (while_end -> BRACES .)
    TYPE_FLOAT      reduce using rule 60 (while_end -> BRACES .)
    TYPE_BOOLEAN    reduce using rule 60 (while_end -> BRACES .)
    TYPE_VOID       reduce using rule 60 (while_end -> BRACES .)
    BRACES          reduce using rule 60 (while_end -> BRACES .)
    RETURN          reduce using rule 60 (while_end -> BRACES .)


state 150

    (68) input_statute -> INPUT L_PAR type R_PAR . END_LINE

    END_LINE        shift and go to state 154


state 151

    (64) if_statute -> IF L_PAR operation if_init BRACES code_statute BRACES . if_statute_aux
    (65) if_statute_aux -> . else_statute BRACES code_statute BRACES
    (66) if_statute_aux -> .
    (67) else_statute -> . ELSE

    ID              reduce using rule 66 (if_statute_aux -> .)
    PRINT           reduce using rule 66 (if_statute_aux -> .)
    IF              reduce using rule 66 (if_statute_aux -> .)
    WHILE           reduce using rule 66 (if_statute_aux -> .)
    DO              reduce using rule 66 (if_statute_aux -> .)
    TYPE_INT        reduce using rule 66 (if_statute_aux -> .)
    TYPE_FLOAT      reduce using rule 66 (if_statute_aux -> .)
    TYPE_BOOLEAN    reduce using rule 66 (if_statute_aux -> .)
    TYPE_VOID       reduce using rule 66 (if_statute_aux -> .)
    BRACES          reduce using rule 66 (if_statute_aux -> .)
    RETURN          reduce using rule 66 (if_statute_aux -> .)
    ELSE            shift and go to state 156

    else_statute                   shift and go to state 157
    if_statute_aux                 shift and go to state 155

state 152

    (61) do_while_statute -> DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end .

    ID              reduce using rule 61 (do_while_statute -> DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end .)
    PRINT           reduce using rule 61 (do_while_statute -> DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end .)
    IF              reduce using rule 61 (do_while_statute -> DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end .)
    WHILE           reduce using rule 61 (do_while_statute -> DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end .)
    DO              reduce using rule 61 (do_while_statute -> DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end .)
    TYPE_INT        reduce using rule 61 (do_while_statute -> DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end .)
    TYPE_FLOAT      reduce using rule 61 (do_while_statute -> DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end .)
    TYPE_BOOLEAN    reduce using rule 61 (do_while_statute -> DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end .)
    TYPE_VOID       reduce using rule 61 (do_while_statute -> DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end .)
    BRACES          reduce using rule 61 (do_while_statute -> DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end .)
    RETURN          reduce using rule 61 (do_while_statute -> DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end .)


state 153

    (63) do_while_end -> R_PAR .

    ID              reduce using rule 63 (do_while_end -> R_PAR .)
    PRINT           reduce using rule 63 (do_while_end -> R_PAR .)
    IF              reduce using rule 63 (do_while_end -> R_PAR .)
    WHILE           reduce using rule 63 (do_while_end -> R_PAR .)
    DO              reduce using rule 63 (do_while_end -> R_PAR .)
    TYPE_INT        reduce using rule 63 (do_while_end -> R_PAR .)
    TYPE_FLOAT      reduce using rule 63 (do_while_end -> R_PAR .)
    TYPE_BOOLEAN    reduce using rule 63 (do_while_end -> R_PAR .)
    TYPE_VOID       reduce using rule 63 (do_while_end -> R_PAR .)
    BRACES          reduce using rule 63 (do_while_end -> R_PAR .)
    RETURN          reduce using rule 63 (do_while_end -> R_PAR .)


state 154

    (68) input_statute -> INPUT L_PAR type R_PAR END_LINE .

    ID              reduce using rule 68 (input_statute -> INPUT L_PAR type R_PAR END_LINE .)
    PRINT           reduce using rule 68 (input_statute -> INPUT L_PAR type R_PAR END_LINE .)
    IF              reduce using rule 68 (input_statute -> INPUT L_PAR type R_PAR END_LINE .)
    WHILE           reduce using rule 68 (input_statute -> INPUT L_PAR type R_PAR END_LINE .)
    DO              reduce using rule 68 (input_statute -> INPUT L_PAR type R_PAR END_LINE .)
    TYPE_INT        reduce using rule 68 (input_statute -> INPUT L_PAR type R_PAR END_LINE .)
    TYPE_FLOAT      reduce using rule 68 (input_statute -> INPUT L_PAR type R_PAR END_LINE .)
    TYPE_BOOLEAN    reduce using rule 68 (input_statute -> INPUT L_PAR type R_PAR END_LINE .)
    TYPE_VOID       reduce using rule 68 (input_statute -> INPUT L_PAR type R_PAR END_LINE .)
    BRACES          reduce using rule 68 (input_statute -> INPUT L_PAR type R_PAR END_LINE .)
    RETURN          reduce using rule 68 (input_statute -> INPUT L_PAR type R_PAR END_LINE .)


state 155

    (64) if_statute -> IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux .

    ID              reduce using rule 64 (if_statute -> IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux .)
    PRINT           reduce using rule 64 (if_statute -> IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux .)
    IF              reduce using rule 64 (if_statute -> IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux .)
    WHILE           reduce using rule 64 (if_statute -> IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux .)
    DO              reduce using rule 64 (if_statute -> IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux .)
    TYPE_INT        reduce using rule 64 (if_statute -> IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux .)
    TYPE_FLOAT      reduce using rule 64 (if_statute -> IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux .)
    TYPE_BOOLEAN    reduce using rule 64 (if_statute -> IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux .)
    TYPE_VOID       reduce using rule 64 (if_statute -> IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux .)
    BRACES          reduce using rule 64 (if_statute -> IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux .)
    RETURN          reduce using rule 64 (if_statute -> IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux .)


state 156

    (67) else_statute -> ELSE .

    BRACES          reduce using rule 67 (else_statute -> ELSE .)


state 157

    (65) if_statute_aux -> else_statute . BRACES code_statute BRACES

    BRACES          shift and go to state 158


state 158

    (65) if_statute_aux -> else_statute BRACES . code_statute BRACES
    (7) code_statute -> . statute code_statute
    (8) code_statute -> .
    (9) statute -> . print_statute
    (10) statute -> . ID statute_2
    (11) statute -> . if_statute
    (12) statute -> . while_statute
    (13) statute -> . do_while_statute
    (14) statute -> . type ID variable_dec
    (39) print_statute -> . PRINT L_PAR operation R_PAR END_LINE
    (64) if_statute -> . IF L_PAR operation if_init BRACES code_statute BRACES if_statute_aux
    (58) while_statute -> . WHILE L_PAR operation while_init BRACES code_statute while_end
    (61) do_while_statute -> . DO do_while_init code_statute BRACES WHILE L_PAR operation do_while_end
    (84) type -> . TYPE_INT
    (85) type -> . TYPE_FLOAT
    (86) type -> . TYPE_BOOLEAN
    (87) type -> . TYPE_VOID

    BRACES          reduce using rule 8 (code_statute -> .)
    ID              shift and go to state 26
    PRINT           shift and go to state 24
    IF              shift and go to state 29
    WHILE           shift and go to state 22
    DO              shift and go to state 20
    TYPE_INT        shift and go to state 1
    TYPE_FLOAT      shift and go to state 2
    TYPE_BOOLEAN    shift and go to state 5
    TYPE_VOID       shift and go to state 7

    statute                        shift and go to state 30
    type                           shift and go to state 27
    code_statute                   shift and go to state 159
    do_while_statute               shift and go to state 25
    print_statute                  shift and go to state 31
    if_statute                     shift and go to state 23
    while_statute                  shift and go to state 28

state 159

    (65) if_statute_aux -> else_statute BRACES code_statute . BRACES

    BRACES          shift and go to state 160


state 160

    (65) if_statute_aux -> else_statute BRACES code_statute BRACES .

    ID              reduce using rule 65 (if_statute_aux -> else_statute BRACES code_statute BRACES .)
    PRINT           reduce using rule 65 (if_statute_aux -> else_statute BRACES code_statute BRACES .)
    IF              reduce using rule 65 (if_statute_aux -> else_statute BRACES code_statute BRACES .)
    WHILE           reduce using rule 65 (if_statute_aux -> else_statute BRACES code_statute BRACES .)
    DO              reduce using rule 65 (if_statute_aux -> else_statute BRACES code_statute BRACES .)
    TYPE_INT        reduce using rule 65 (if_statute_aux -> else_statute BRACES code_statute BRACES .)
    TYPE_FLOAT      reduce using rule 65 (if_statute_aux -> else_statute BRACES code_statute BRACES .)
    TYPE_BOOLEAN    reduce using rule 65 (if_statute_aux -> else_statute BRACES code_statute BRACES .)
    TYPE_VOID       reduce using rule 65 (if_statute_aux -> else_statute BRACES code_statute BRACES .)
    BRACES          reduce using rule 65 (if_statute_aux -> else_statute BRACES code_statute BRACES .)
    RETURN          reduce using rule 65 (if_statute_aux -> else_statute BRACES code_statute BRACES .)

