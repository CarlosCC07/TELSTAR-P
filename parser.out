Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID END_LINE global_variable_dec function_dec L_BRACE code_statute R_BRACE
Rule 2     empty -> <empty>
Rule 3     global_variable_dec -> vd_2 END_LINE
Rule 4     global_variable_dec -> empty
Rule 5     vd_2 -> type ID variable_dec_multi
Rule 6     variable_dec_multi -> COMMA vd_2
Rule 7     variable_dec_multi -> empty
Rule 8     local_var_dec -> type ID local_multivar_dec END_LINE
Rule 9     local_multivar_dec -> COMMA local_var_dec
Rule 10    local_multivar_dec -> empty
Rule 11    code_statute -> statute code_statute
Rule 12    code_statute -> empty
Rule 13    type -> TYPE_INT array_dec
Rule 14    type -> TYPE_FLOAT array_dec
Rule 15    type -> TYPE_BOOLEAN array_dec
Rule 16    data -> INT
Rule 17    data -> FLOAT
Rule 18    data -> BOOLEAN
Rule 19    array_dec -> L_BRACKET INT R_BRACKET
Rule 20    array_dec -> empty
Rule 21    function_dec -> DEFINE type ID LEFT_PAR params RIGHT_PAR L_BRACE code_statute R_BRACE
Rule 22    function_dec -> empty
Rule 23    function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE
Rule 24    cm_2 -> COMMA call_multi
Rule 25    cm_2 -> empty
Rule 26    call_multi -> exp cm_2
Rule 27    call_multi -> empty
Rule 28    params -> type ID param_array params_multi
Rule 29    params -> empty
Rule 30    param_array -> L_BRACKET exp R_BRACKET
Rule 31    param_array -> empty
Rule 32    params_multi -> COMMA params
Rule 33    params_multi -> empty
Rule 34    statute -> assign_statute
Rule 35    statute -> if_statute
Rule 36    statute -> while_statute
Rule 37    statute -> do_while_statute
Rule 38    statute -> return_statute
Rule 39    statute -> print_statute
Rule 40    statute -> draw_statute
Rule 41    statute -> local_var_dec
Rule 42    statute -> function_call
Rule 43    assign_statute -> ID array_assign_statute ASSIGN logical_exp END_LINE
Rule 44    array_assign_statute -> L_BRACKET exp R_BRACKET
Rule 45    array_assign_statute -> empty
Rule 46    if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE
Rule 47    if_else -> ELSE L_BRACE code_statute R_BRACE
Rule 48    if_else -> empty
Rule 49    while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE
Rule 50    do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE
Rule 51    return_statute -> RETURN logical_exp END_LINE
Rule 52    print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE
Rule 53    multi_print_statute -> COMMA logical_exp print_2
Rule 54    multi_print_statute -> empty
Rule 55    print_2 -> multi_print_statute
Rule 56    draw_statute -> draw_point
Rule 57    draw_statute -> draw_line
Rule 58    draw_statute -> draw_curve
Rule 59    draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE
Rule 60    point_extra_1 -> COMMA logical_exp point_extra_2
Rule 61    point_extra_1 -> empty
Rule 62    point_extra_2 -> COMMA logical_exp
Rule 63    point_extra_2 -> empty
Rule 64    draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE
Rule 65    line_extra_1 -> COMMA logical_exp line_extra_2
Rule 66    line_extra_1 -> empty
Rule 67    line_extra_2 -> COMMA logical_exp
Rule 68    line_extra_2 -> empty
Rule 69    draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE
Rule 70    curve_extra_1 -> COMMA logical_exp curve_extra_2
Rule 71    curve_extra_1 -> empty
Rule 72    curve_extra_2 -> COMMA logical_exp
Rule 73    curve_extra_2 -> empty
Rule 74    logical_exp -> cond_exp logical_exp_2
Rule 75    logical_exp_2 -> LOGIC_OPERATOR cond_exp
Rule 76    logical_exp_2 -> empty
Rule 77    cond_exp -> exp cond_exp_2
Rule 78    cond_exp_2 -> COND_OPERATOR exp
Rule 79    cond_exp_2 -> empty
Rule 80    exp -> term exp_2
Rule 81    exp_2 -> AS_OPERATOR term
Rule 82    exp_2 -> empty
Rule 83    term -> factor term_2
Rule 84    term_2 -> MD_OPERATOR factor
Rule 85    term_2 -> empty
Rule 86    factor -> LEFT_PAR logical_exp RIGHT_PAR
Rule 87    factor -> factor_2 const_var
Rule 88    factor_2 -> AS_OPERATOR
Rule 89    factor_2 -> empty
Rule 90    const_var -> data
Rule 91    const_var -> id_oper
Rule 92    id_oper -> ID id_oper_2
Rule 93    id_oper_2 -> L_BRACKET exp R_BRACKET
Rule 94    id_oper_2 -> LEFT_PAR id_oper_3 RIGHT_PAR
Rule 95    id_oper_2 -> empty
Rule 96    id_oper_3 -> exp id_oper_multi
Rule 97    id_oper_3 -> empty
Rule 98    id_oper_multi -> COMMA exp id_multi_2
Rule 99    id_oper_multi -> empty
Rule 100   id_multi_2 -> id_oper_multi

Terminals, with rules where they appear

ASSIGN               : 43
AS_OPERATOR          : 81 88
BOOLEAN              : 18
CALL                 : 23
COMMA                : 6 9 24 32 53 59 60 62 64 64 65 67 69 69 69 70 72 98
COND_OPERATOR        : 78
CURVE                : 69
DEFINE               : 21
DO                   : 50
DOT                  : 59
ELSE                 : 47
END_LINE             : 1 3 8 23 43 46 49 50 51 52 59 64 69
FLOAT                : 17
ID                   : 1 5 8 21 23 28 43 92
IF                   : 46
INT                  : 16 19
LEFT_PAR             : 21 23 46 49 50 52 59 64 69 86 94
LINE                 : 64
LOGIC_OPERATOR       : 75
L_BRACE              : 1 21 46 47 49 50
L_BRACKET            : 19 30 44 93
MD_OPERATOR          : 84
PRINT                : 52
PROGRAM              : 1
RETURN               : 51
RIGHT_PAR            : 21 23 46 49 50 52 59 64 69 86 94
R_BRACE              : 1 21 46 47 49 50
R_BRACKET            : 19 30 44 93
TYPE_BOOLEAN         : 15
TYPE_FLOAT           : 14
TYPE_INT             : 13
WHILE                : 49 50
error                : 

Nonterminals, with rules where they appear

array_assign_statute : 43
array_dec            : 13 14 15
assign_statute       : 34
call_multi           : 24
cm_2                 : 23 26
code_statute         : 1 11 21 46 47 49 50
cond_exp             : 74 75
cond_exp_2           : 77
const_var            : 87
curve_extra_1        : 69
curve_extra_2        : 70
data                 : 90
do_while_statute     : 37
draw_curve           : 58
draw_line            : 57
draw_point           : 56
draw_statute         : 40
empty                : 4 7 10 12 20 22 25 27 29 31 33 45 48 54 61 63 66 68 71 73 76 79 82 85 89 95 97 99
exp                  : 23 26 30 44 77 78 93 96 98
exp_2                : 80
factor               : 83 84
factor_2             : 87
function_call        : 42
function_dec         : 1
global_variable_dec  : 1
id_multi_2           : 98
id_oper              : 91
id_oper_2            : 92
id_oper_3            : 94
id_oper_multi        : 96 100
if_else              : 46
if_statute           : 35
line_extra_1         : 64
line_extra_2         : 65
local_multivar_dec   : 8
local_var_dec        : 9 41
logical_exp          : 43 46 49 50 51 52 53 59 59 60 62 64 64 64 65 67 69 69 69 69 70 72 86
logical_exp_2        : 74
multi_print_statute  : 52 55
param_array          : 28
params               : 21 32
params_multi         : 28
point_extra_1        : 59
point_extra_2        : 60
print_2              : 53
print_statute        : 39
program              : 0
return_statute       : 38
statute              : 11
term                 : 80 81
term_2               : 83
type                 : 5 8 21 28
variable_dec_multi   : 5
vd_2                 : 3 6
while_statute        : 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID END_LINE global_variable_dec function_dec L_BRACE code_statute R_BRACE

    PROGRAM         shift and go to state 1

    program                        shift and go to state 2

state 1

    (1) program -> PROGRAM . ID END_LINE global_variable_dec function_dec L_BRACE code_statute R_BRACE

    ID              shift and go to state 3


state 2

    (0) S' -> program .



state 3

    (1) program -> PROGRAM ID . END_LINE global_variable_dec function_dec L_BRACE code_statute R_BRACE

    END_LINE        shift and go to state 4


state 4

    (1) program -> PROGRAM ID END_LINE . global_variable_dec function_dec L_BRACE code_statute R_BRACE
    (3) global_variable_dec -> . vd_2 END_LINE
    (4) global_variable_dec -> . empty
    (5) vd_2 -> . type ID variable_dec_multi
    (2) empty -> .
    (13) type -> . TYPE_INT array_dec
    (14) type -> . TYPE_FLOAT array_dec
    (15) type -> . TYPE_BOOLEAN array_dec

    DEFINE          reduce using rule 2 (empty -> .)
    L_BRACE         reduce using rule 2 (empty -> .)
    TYPE_INT        shift and go to state 11
    TYPE_FLOAT      shift and go to state 6
    TYPE_BOOLEAN    shift and go to state 10

    global_variable_dec            shift and go to state 5
    type                           shift and go to state 8
    vd_2                           shift and go to state 9
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID END_LINE global_variable_dec . function_dec L_BRACE code_statute R_BRACE
    (21) function_dec -> . DEFINE type ID LEFT_PAR params RIGHT_PAR L_BRACE code_statute R_BRACE
    (22) function_dec -> . empty
    (2) empty -> .

    DEFINE          shift and go to state 12
    L_BRACE         reduce using rule 2 (empty -> .)

    function_dec                   shift and go to state 14
    empty                          shift and go to state 13

state 6

    (14) type -> TYPE_FLOAT . array_dec
    (19) array_dec -> . L_BRACKET INT R_BRACKET
    (20) array_dec -> . empty
    (2) empty -> .

    L_BRACKET       shift and go to state 16
    ID              reduce using rule 2 (empty -> .)

    array_dec                      shift and go to state 15
    empty                          shift and go to state 17

state 7

    (4) global_variable_dec -> empty .

    DEFINE          reduce using rule 4 (global_variable_dec -> empty .)
    L_BRACE         reduce using rule 4 (global_variable_dec -> empty .)


state 8

    (5) vd_2 -> type . ID variable_dec_multi

    ID              shift and go to state 18


state 9

    (3) global_variable_dec -> vd_2 . END_LINE

    END_LINE        shift and go to state 19


state 10

    (15) type -> TYPE_BOOLEAN . array_dec
    (19) array_dec -> . L_BRACKET INT R_BRACKET
    (20) array_dec -> . empty
    (2) empty -> .

    L_BRACKET       shift and go to state 16
    ID              reduce using rule 2 (empty -> .)

    array_dec                      shift and go to state 20
    empty                          shift and go to state 17

state 11

    (13) type -> TYPE_INT . array_dec
    (19) array_dec -> . L_BRACKET INT R_BRACKET
    (20) array_dec -> . empty
    (2) empty -> .

    L_BRACKET       shift and go to state 16
    ID              reduce using rule 2 (empty -> .)

    array_dec                      shift and go to state 21
    empty                          shift and go to state 17

state 12

    (21) function_dec -> DEFINE . type ID LEFT_PAR params RIGHT_PAR L_BRACE code_statute R_BRACE
    (13) type -> . TYPE_INT array_dec
    (14) type -> . TYPE_FLOAT array_dec
    (15) type -> . TYPE_BOOLEAN array_dec

    TYPE_INT        shift and go to state 11
    TYPE_FLOAT      shift and go to state 6
    TYPE_BOOLEAN    shift and go to state 10

    type                           shift and go to state 22

state 13

    (22) function_dec -> empty .

    L_BRACE         reduce using rule 22 (function_dec -> empty .)


state 14

    (1) program -> PROGRAM ID END_LINE global_variable_dec function_dec . L_BRACE code_statute R_BRACE

    L_BRACE         shift and go to state 23


state 15

    (14) type -> TYPE_FLOAT array_dec .

    ID              reduce using rule 14 (type -> TYPE_FLOAT array_dec .)


state 16

    (19) array_dec -> L_BRACKET . INT R_BRACKET

    INT             shift and go to state 24


state 17

    (20) array_dec -> empty .

    ID              reduce using rule 20 (array_dec -> empty .)


state 18

    (5) vd_2 -> type ID . variable_dec_multi
    (6) variable_dec_multi -> . COMMA vd_2
    (7) variable_dec_multi -> . empty
    (2) empty -> .

    COMMA           shift and go to state 26
    END_LINE        reduce using rule 2 (empty -> .)

    empty                          shift and go to state 27
    variable_dec_multi             shift and go to state 25

state 19

    (3) global_variable_dec -> vd_2 END_LINE .

    DEFINE          reduce using rule 3 (global_variable_dec -> vd_2 END_LINE .)
    L_BRACE         reduce using rule 3 (global_variable_dec -> vd_2 END_LINE .)


state 20

    (15) type -> TYPE_BOOLEAN array_dec .

    ID              reduce using rule 15 (type -> TYPE_BOOLEAN array_dec .)


state 21

    (13) type -> TYPE_INT array_dec .

    ID              reduce using rule 13 (type -> TYPE_INT array_dec .)


state 22

    (21) function_dec -> DEFINE type . ID LEFT_PAR params RIGHT_PAR L_BRACE code_statute R_BRACE

    ID              shift and go to state 28


state 23

    (1) program -> PROGRAM ID END_LINE global_variable_dec function_dec L_BRACE . code_statute R_BRACE
    (11) code_statute -> . statute code_statute
    (12) code_statute -> . empty
    (34) statute -> . assign_statute
    (35) statute -> . if_statute
    (36) statute -> . while_statute
    (37) statute -> . do_while_statute
    (38) statute -> . return_statute
    (39) statute -> . print_statute
    (40) statute -> . draw_statute
    (41) statute -> . local_var_dec
    (42) statute -> . function_call
    (2) empty -> .
    (43) assign_statute -> . ID array_assign_statute ASSIGN logical_exp END_LINE
    (46) if_statute -> . IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE
    (49) while_statute -> . WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE
    (50) do_while_statute -> . DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE
    (51) return_statute -> . RETURN logical_exp END_LINE
    (52) print_statute -> . PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE
    (56) draw_statute -> . draw_point
    (57) draw_statute -> . draw_line
    (58) draw_statute -> . draw_curve
    (8) local_var_dec -> . type ID local_multivar_dec END_LINE
    (23) function_call -> . CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE
    (59) draw_point -> . DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE
    (64) draw_line -> . LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE
    (69) draw_curve -> . CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE
    (13) type -> . TYPE_INT array_dec
    (14) type -> . TYPE_FLOAT array_dec
    (15) type -> . TYPE_BOOLEAN array_dec

    R_BRACE         reduce using rule 2 (empty -> .)
    ID              shift and go to state 39
    IF              shift and go to state 34
    WHILE           shift and go to state 45
    DO              shift and go to state 31
    RETURN          shift and go to state 44
    PRINT           shift and go to state 36
    CALL            shift and go to state 50
    DOT             shift and go to state 48
    LINE            shift and go to state 42
    CURVE           shift and go to state 30
    TYPE_INT        shift and go to state 11
    TYPE_FLOAT      shift and go to state 6
    TYPE_BOOLEAN    shift and go to state 10

    function_call                  shift and go to state 29
    draw_line                      shift and go to state 41
    draw_statute                   shift and go to state 33
    draw_point                     shift and go to state 40
    while_statute                  shift and go to state 32
    return_statute                 shift and go to state 43
    do_while_statute               shift and go to state 35
    assign_statute                 shift and go to state 46
    draw_curve                     shift and go to state 47
    if_statute                     shift and go to state 49
    print_statute                  shift and go to state 37
    statute                        shift and go to state 51
    empty                          shift and go to state 52
    type                           shift and go to state 38
    code_statute                   shift and go to state 53
    local_var_dec                  shift and go to state 54

state 24

    (19) array_dec -> L_BRACKET INT . R_BRACKET

    R_BRACKET       shift and go to state 55


state 25

    (5) vd_2 -> type ID variable_dec_multi .

    END_LINE        reduce using rule 5 (vd_2 -> type ID variable_dec_multi .)


state 26

    (6) variable_dec_multi -> COMMA . vd_2
    (5) vd_2 -> . type ID variable_dec_multi
    (13) type -> . TYPE_INT array_dec
    (14) type -> . TYPE_FLOAT array_dec
    (15) type -> . TYPE_BOOLEAN array_dec

    TYPE_INT        shift and go to state 11
    TYPE_FLOAT      shift and go to state 6
    TYPE_BOOLEAN    shift and go to state 10

    type                           shift and go to state 8
    vd_2                           shift and go to state 56

state 27

    (7) variable_dec_multi -> empty .

    END_LINE        reduce using rule 7 (variable_dec_multi -> empty .)


state 28

    (21) function_dec -> DEFINE type ID . LEFT_PAR params RIGHT_PAR L_BRACE code_statute R_BRACE

    LEFT_PAR        shift and go to state 57


state 29

    (42) statute -> function_call .

    ID              reduce using rule 42 (statute -> function_call .)
    IF              reduce using rule 42 (statute -> function_call .)
    WHILE           reduce using rule 42 (statute -> function_call .)
    DO              reduce using rule 42 (statute -> function_call .)
    RETURN          reduce using rule 42 (statute -> function_call .)
    PRINT           reduce using rule 42 (statute -> function_call .)
    CALL            reduce using rule 42 (statute -> function_call .)
    DOT             reduce using rule 42 (statute -> function_call .)
    LINE            reduce using rule 42 (statute -> function_call .)
    CURVE           reduce using rule 42 (statute -> function_call .)
    TYPE_INT        reduce using rule 42 (statute -> function_call .)
    TYPE_FLOAT      reduce using rule 42 (statute -> function_call .)
    TYPE_BOOLEAN    reduce using rule 42 (statute -> function_call .)
    R_BRACE         reduce using rule 42 (statute -> function_call .)


state 30

    (69) draw_curve -> CURVE . LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE

    LEFT_PAR        shift and go to state 58


state 31

    (50) do_while_statute -> DO . L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE

    L_BRACE         shift and go to state 59


state 32

    (36) statute -> while_statute .

    ID              reduce using rule 36 (statute -> while_statute .)
    IF              reduce using rule 36 (statute -> while_statute .)
    WHILE           reduce using rule 36 (statute -> while_statute .)
    DO              reduce using rule 36 (statute -> while_statute .)
    RETURN          reduce using rule 36 (statute -> while_statute .)
    PRINT           reduce using rule 36 (statute -> while_statute .)
    CALL            reduce using rule 36 (statute -> while_statute .)
    DOT             reduce using rule 36 (statute -> while_statute .)
    LINE            reduce using rule 36 (statute -> while_statute .)
    CURVE           reduce using rule 36 (statute -> while_statute .)
    TYPE_INT        reduce using rule 36 (statute -> while_statute .)
    TYPE_FLOAT      reduce using rule 36 (statute -> while_statute .)
    TYPE_BOOLEAN    reduce using rule 36 (statute -> while_statute .)
    R_BRACE         reduce using rule 36 (statute -> while_statute .)


state 33

    (40) statute -> draw_statute .

    ID              reduce using rule 40 (statute -> draw_statute .)
    IF              reduce using rule 40 (statute -> draw_statute .)
    WHILE           reduce using rule 40 (statute -> draw_statute .)
    DO              reduce using rule 40 (statute -> draw_statute .)
    RETURN          reduce using rule 40 (statute -> draw_statute .)
    PRINT           reduce using rule 40 (statute -> draw_statute .)
    CALL            reduce using rule 40 (statute -> draw_statute .)
    DOT             reduce using rule 40 (statute -> draw_statute .)
    LINE            reduce using rule 40 (statute -> draw_statute .)
    CURVE           reduce using rule 40 (statute -> draw_statute .)
    TYPE_INT        reduce using rule 40 (statute -> draw_statute .)
    TYPE_FLOAT      reduce using rule 40 (statute -> draw_statute .)
    TYPE_BOOLEAN    reduce using rule 40 (statute -> draw_statute .)
    R_BRACE         reduce using rule 40 (statute -> draw_statute .)


state 34

    (46) if_statute -> IF . LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE

    LEFT_PAR        shift and go to state 60


state 35

    (37) statute -> do_while_statute .

    ID              reduce using rule 37 (statute -> do_while_statute .)
    IF              reduce using rule 37 (statute -> do_while_statute .)
    WHILE           reduce using rule 37 (statute -> do_while_statute .)
    DO              reduce using rule 37 (statute -> do_while_statute .)
    RETURN          reduce using rule 37 (statute -> do_while_statute .)
    PRINT           reduce using rule 37 (statute -> do_while_statute .)
    CALL            reduce using rule 37 (statute -> do_while_statute .)
    DOT             reduce using rule 37 (statute -> do_while_statute .)
    LINE            reduce using rule 37 (statute -> do_while_statute .)
    CURVE           reduce using rule 37 (statute -> do_while_statute .)
    TYPE_INT        reduce using rule 37 (statute -> do_while_statute .)
    TYPE_FLOAT      reduce using rule 37 (statute -> do_while_statute .)
    TYPE_BOOLEAN    reduce using rule 37 (statute -> do_while_statute .)
    R_BRACE         reduce using rule 37 (statute -> do_while_statute .)


state 36

    (52) print_statute -> PRINT . LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE

    LEFT_PAR        shift and go to state 61


state 37

    (39) statute -> print_statute .

    ID              reduce using rule 39 (statute -> print_statute .)
    IF              reduce using rule 39 (statute -> print_statute .)
    WHILE           reduce using rule 39 (statute -> print_statute .)
    DO              reduce using rule 39 (statute -> print_statute .)
    RETURN          reduce using rule 39 (statute -> print_statute .)
    PRINT           reduce using rule 39 (statute -> print_statute .)
    CALL            reduce using rule 39 (statute -> print_statute .)
    DOT             reduce using rule 39 (statute -> print_statute .)
    LINE            reduce using rule 39 (statute -> print_statute .)
    CURVE           reduce using rule 39 (statute -> print_statute .)
    TYPE_INT        reduce using rule 39 (statute -> print_statute .)
    TYPE_FLOAT      reduce using rule 39 (statute -> print_statute .)
    TYPE_BOOLEAN    reduce using rule 39 (statute -> print_statute .)
    R_BRACE         reduce using rule 39 (statute -> print_statute .)


state 38

    (8) local_var_dec -> type . ID local_multivar_dec END_LINE

    ID              shift and go to state 62


state 39

    (43) assign_statute -> ID . array_assign_statute ASSIGN logical_exp END_LINE
    (44) array_assign_statute -> . L_BRACKET exp R_BRACKET
    (45) array_assign_statute -> . empty
    (2) empty -> .

    L_BRACKET       shift and go to state 63
    ASSIGN          reduce using rule 2 (empty -> .)

    array_assign_statute           shift and go to state 64
    empty                          shift and go to state 65

state 40

    (56) draw_statute -> draw_point .

    ID              reduce using rule 56 (draw_statute -> draw_point .)
    IF              reduce using rule 56 (draw_statute -> draw_point .)
    WHILE           reduce using rule 56 (draw_statute -> draw_point .)
    DO              reduce using rule 56 (draw_statute -> draw_point .)
    RETURN          reduce using rule 56 (draw_statute -> draw_point .)
    PRINT           reduce using rule 56 (draw_statute -> draw_point .)
    CALL            reduce using rule 56 (draw_statute -> draw_point .)
    DOT             reduce using rule 56 (draw_statute -> draw_point .)
    LINE            reduce using rule 56 (draw_statute -> draw_point .)
    CURVE           reduce using rule 56 (draw_statute -> draw_point .)
    TYPE_INT        reduce using rule 56 (draw_statute -> draw_point .)
    TYPE_FLOAT      reduce using rule 56 (draw_statute -> draw_point .)
    TYPE_BOOLEAN    reduce using rule 56 (draw_statute -> draw_point .)
    R_BRACE         reduce using rule 56 (draw_statute -> draw_point .)


state 41

    (57) draw_statute -> draw_line .

    ID              reduce using rule 57 (draw_statute -> draw_line .)
    IF              reduce using rule 57 (draw_statute -> draw_line .)
    WHILE           reduce using rule 57 (draw_statute -> draw_line .)
    DO              reduce using rule 57 (draw_statute -> draw_line .)
    RETURN          reduce using rule 57 (draw_statute -> draw_line .)
    PRINT           reduce using rule 57 (draw_statute -> draw_line .)
    CALL            reduce using rule 57 (draw_statute -> draw_line .)
    DOT             reduce using rule 57 (draw_statute -> draw_line .)
    LINE            reduce using rule 57 (draw_statute -> draw_line .)
    CURVE           reduce using rule 57 (draw_statute -> draw_line .)
    TYPE_INT        reduce using rule 57 (draw_statute -> draw_line .)
    TYPE_FLOAT      reduce using rule 57 (draw_statute -> draw_line .)
    TYPE_BOOLEAN    reduce using rule 57 (draw_statute -> draw_line .)
    R_BRACE         reduce using rule 57 (draw_statute -> draw_line .)


state 42

    (64) draw_line -> LINE . LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE

    LEFT_PAR        shift and go to state 66


state 43

    (38) statute -> return_statute .

    ID              reduce using rule 38 (statute -> return_statute .)
    IF              reduce using rule 38 (statute -> return_statute .)
    WHILE           reduce using rule 38 (statute -> return_statute .)
    DO              reduce using rule 38 (statute -> return_statute .)
    RETURN          reduce using rule 38 (statute -> return_statute .)
    PRINT           reduce using rule 38 (statute -> return_statute .)
    CALL            reduce using rule 38 (statute -> return_statute .)
    DOT             reduce using rule 38 (statute -> return_statute .)
    LINE            reduce using rule 38 (statute -> return_statute .)
    CURVE           reduce using rule 38 (statute -> return_statute .)
    TYPE_INT        reduce using rule 38 (statute -> return_statute .)
    TYPE_FLOAT      reduce using rule 38 (statute -> return_statute .)
    TYPE_BOOLEAN    reduce using rule 38 (statute -> return_statute .)
    R_BRACE         reduce using rule 38 (statute -> return_statute .)


state 44

    (51) return_statute -> RETURN . logical_exp END_LINE
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    cond_exp                       shift and go to state 73
    logical_exp                    shift and go to state 69
    factor                         shift and go to state 71
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 45

    (49) while_statute -> WHILE . LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE

    LEFT_PAR        shift and go to state 76


state 46

    (34) statute -> assign_statute .

    ID              reduce using rule 34 (statute -> assign_statute .)
    IF              reduce using rule 34 (statute -> assign_statute .)
    WHILE           reduce using rule 34 (statute -> assign_statute .)
    DO              reduce using rule 34 (statute -> assign_statute .)
    RETURN          reduce using rule 34 (statute -> assign_statute .)
    PRINT           reduce using rule 34 (statute -> assign_statute .)
    CALL            reduce using rule 34 (statute -> assign_statute .)
    DOT             reduce using rule 34 (statute -> assign_statute .)
    LINE            reduce using rule 34 (statute -> assign_statute .)
    CURVE           reduce using rule 34 (statute -> assign_statute .)
    TYPE_INT        reduce using rule 34 (statute -> assign_statute .)
    TYPE_FLOAT      reduce using rule 34 (statute -> assign_statute .)
    TYPE_BOOLEAN    reduce using rule 34 (statute -> assign_statute .)
    R_BRACE         reduce using rule 34 (statute -> assign_statute .)


state 47

    (58) draw_statute -> draw_curve .

    ID              reduce using rule 58 (draw_statute -> draw_curve .)
    IF              reduce using rule 58 (draw_statute -> draw_curve .)
    WHILE           reduce using rule 58 (draw_statute -> draw_curve .)
    DO              reduce using rule 58 (draw_statute -> draw_curve .)
    RETURN          reduce using rule 58 (draw_statute -> draw_curve .)
    PRINT           reduce using rule 58 (draw_statute -> draw_curve .)
    CALL            reduce using rule 58 (draw_statute -> draw_curve .)
    DOT             reduce using rule 58 (draw_statute -> draw_curve .)
    LINE            reduce using rule 58 (draw_statute -> draw_curve .)
    CURVE           reduce using rule 58 (draw_statute -> draw_curve .)
    TYPE_INT        reduce using rule 58 (draw_statute -> draw_curve .)
    TYPE_FLOAT      reduce using rule 58 (draw_statute -> draw_curve .)
    TYPE_BOOLEAN    reduce using rule 58 (draw_statute -> draw_curve .)
    R_BRACE         reduce using rule 58 (draw_statute -> draw_curve .)


state 48

    (59) draw_point -> DOT . LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE

    LEFT_PAR        shift and go to state 77


state 49

    (35) statute -> if_statute .

    ID              reduce using rule 35 (statute -> if_statute .)
    IF              reduce using rule 35 (statute -> if_statute .)
    WHILE           reduce using rule 35 (statute -> if_statute .)
    DO              reduce using rule 35 (statute -> if_statute .)
    RETURN          reduce using rule 35 (statute -> if_statute .)
    PRINT           reduce using rule 35 (statute -> if_statute .)
    CALL            reduce using rule 35 (statute -> if_statute .)
    DOT             reduce using rule 35 (statute -> if_statute .)
    LINE            reduce using rule 35 (statute -> if_statute .)
    CURVE           reduce using rule 35 (statute -> if_statute .)
    TYPE_INT        reduce using rule 35 (statute -> if_statute .)
    TYPE_FLOAT      reduce using rule 35 (statute -> if_statute .)
    TYPE_BOOLEAN    reduce using rule 35 (statute -> if_statute .)
    R_BRACE         reduce using rule 35 (statute -> if_statute .)


state 50

    (23) function_call -> CALL . ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE

    ID              shift and go to state 78


state 51

    (11) code_statute -> statute . code_statute
    (11) code_statute -> . statute code_statute
    (12) code_statute -> . empty
    (34) statute -> . assign_statute
    (35) statute -> . if_statute
    (36) statute -> . while_statute
    (37) statute -> . do_while_statute
    (38) statute -> . return_statute
    (39) statute -> . print_statute
    (40) statute -> . draw_statute
    (41) statute -> . local_var_dec
    (42) statute -> . function_call
    (2) empty -> .
    (43) assign_statute -> . ID array_assign_statute ASSIGN logical_exp END_LINE
    (46) if_statute -> . IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE
    (49) while_statute -> . WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE
    (50) do_while_statute -> . DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE
    (51) return_statute -> . RETURN logical_exp END_LINE
    (52) print_statute -> . PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE
    (56) draw_statute -> . draw_point
    (57) draw_statute -> . draw_line
    (58) draw_statute -> . draw_curve
    (8) local_var_dec -> . type ID local_multivar_dec END_LINE
    (23) function_call -> . CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE
    (59) draw_point -> . DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE
    (64) draw_line -> . LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE
    (69) draw_curve -> . CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE
    (13) type -> . TYPE_INT array_dec
    (14) type -> . TYPE_FLOAT array_dec
    (15) type -> . TYPE_BOOLEAN array_dec

    R_BRACE         reduce using rule 2 (empty -> .)
    ID              shift and go to state 39
    IF              shift and go to state 34
    WHILE           shift and go to state 45
    DO              shift and go to state 31
    RETURN          shift and go to state 44
    PRINT           shift and go to state 36
    CALL            shift and go to state 50
    DOT             shift and go to state 48
    LINE            shift and go to state 42
    CURVE           shift and go to state 30
    TYPE_INT        shift and go to state 11
    TYPE_FLOAT      shift and go to state 6
    TYPE_BOOLEAN    shift and go to state 10

    function_call                  shift and go to state 29
    draw_line                      shift and go to state 41
    draw_statute                   shift and go to state 33
    draw_point                     shift and go to state 40
    while_statute                  shift and go to state 32
    return_statute                 shift and go to state 43
    do_while_statute               shift and go to state 35
    assign_statute                 shift and go to state 46
    draw_curve                     shift and go to state 47
    if_statute                     shift and go to state 49
    print_statute                  shift and go to state 37
    statute                        shift and go to state 51
    empty                          shift and go to state 52
    type                           shift and go to state 38
    code_statute                   shift and go to state 79
    local_var_dec                  shift and go to state 54

state 52

    (12) code_statute -> empty .

    R_BRACE         reduce using rule 12 (code_statute -> empty .)


state 53

    (1) program -> PROGRAM ID END_LINE global_variable_dec function_dec L_BRACE code_statute . R_BRACE

    R_BRACE         shift and go to state 80


state 54

    (41) statute -> local_var_dec .

    ID              reduce using rule 41 (statute -> local_var_dec .)
    IF              reduce using rule 41 (statute -> local_var_dec .)
    WHILE           reduce using rule 41 (statute -> local_var_dec .)
    DO              reduce using rule 41 (statute -> local_var_dec .)
    RETURN          reduce using rule 41 (statute -> local_var_dec .)
    PRINT           reduce using rule 41 (statute -> local_var_dec .)
    CALL            reduce using rule 41 (statute -> local_var_dec .)
    DOT             reduce using rule 41 (statute -> local_var_dec .)
    LINE            reduce using rule 41 (statute -> local_var_dec .)
    CURVE           reduce using rule 41 (statute -> local_var_dec .)
    TYPE_INT        reduce using rule 41 (statute -> local_var_dec .)
    TYPE_FLOAT      reduce using rule 41 (statute -> local_var_dec .)
    TYPE_BOOLEAN    reduce using rule 41 (statute -> local_var_dec .)
    R_BRACE         reduce using rule 41 (statute -> local_var_dec .)


state 55

    (19) array_dec -> L_BRACKET INT R_BRACKET .

    ID              reduce using rule 19 (array_dec -> L_BRACKET INT R_BRACKET .)


state 56

    (6) variable_dec_multi -> COMMA vd_2 .

    END_LINE        reduce using rule 6 (variable_dec_multi -> COMMA vd_2 .)


state 57

    (21) function_dec -> DEFINE type ID LEFT_PAR . params RIGHT_PAR L_BRACE code_statute R_BRACE
    (28) params -> . type ID param_array params_multi
    (29) params -> . empty
    (13) type -> . TYPE_INT array_dec
    (14) type -> . TYPE_FLOAT array_dec
    (15) type -> . TYPE_BOOLEAN array_dec
    (2) empty -> .

    TYPE_INT        shift and go to state 11
    TYPE_FLOAT      shift and go to state 6
    TYPE_BOOLEAN    shift and go to state 10
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    type                           shift and go to state 81
    params                         shift and go to state 82
    empty                          shift and go to state 83

state 58

    (69) draw_curve -> CURVE LEFT_PAR . logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    logical_exp                    shift and go to state 84
    factor                         shift and go to state 71
    cond_exp                       shift and go to state 73
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 59

    (50) do_while_statute -> DO L_BRACE . code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE
    (11) code_statute -> . statute code_statute
    (12) code_statute -> . empty
    (34) statute -> . assign_statute
    (35) statute -> . if_statute
    (36) statute -> . while_statute
    (37) statute -> . do_while_statute
    (38) statute -> . return_statute
    (39) statute -> . print_statute
    (40) statute -> . draw_statute
    (41) statute -> . local_var_dec
    (42) statute -> . function_call
    (2) empty -> .
    (43) assign_statute -> . ID array_assign_statute ASSIGN logical_exp END_LINE
    (46) if_statute -> . IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE
    (49) while_statute -> . WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE
    (50) do_while_statute -> . DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE
    (51) return_statute -> . RETURN logical_exp END_LINE
    (52) print_statute -> . PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE
    (56) draw_statute -> . draw_point
    (57) draw_statute -> . draw_line
    (58) draw_statute -> . draw_curve
    (8) local_var_dec -> . type ID local_multivar_dec END_LINE
    (23) function_call -> . CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE
    (59) draw_point -> . DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE
    (64) draw_line -> . LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE
    (69) draw_curve -> . CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE
    (13) type -> . TYPE_INT array_dec
    (14) type -> . TYPE_FLOAT array_dec
    (15) type -> . TYPE_BOOLEAN array_dec

    R_BRACE         reduce using rule 2 (empty -> .)
    ID              shift and go to state 39
    IF              shift and go to state 34
    WHILE           shift and go to state 45
    DO              shift and go to state 31
    RETURN          shift and go to state 44
    PRINT           shift and go to state 36
    CALL            shift and go to state 50
    DOT             shift and go to state 48
    LINE            shift and go to state 42
    CURVE           shift and go to state 30
    TYPE_INT        shift and go to state 11
    TYPE_FLOAT      shift and go to state 6
    TYPE_BOOLEAN    shift and go to state 10

    function_call                  shift and go to state 29
    draw_line                      shift and go to state 41
    draw_statute                   shift and go to state 33
    draw_point                     shift and go to state 40
    while_statute                  shift and go to state 32
    return_statute                 shift and go to state 43
    do_while_statute               shift and go to state 35
    assign_statute                 shift and go to state 46
    draw_curve                     shift and go to state 47
    if_statute                     shift and go to state 49
    print_statute                  shift and go to state 37
    statute                        shift and go to state 51
    empty                          shift and go to state 52
    type                           shift and go to state 38
    code_statute                   shift and go to state 85
    local_var_dec                  shift and go to state 54

state 60

    (46) if_statute -> IF LEFT_PAR . logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    logical_exp                    shift and go to state 86
    factor                         shift and go to state 71
    cond_exp                       shift and go to state 73
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 61

    (52) print_statute -> PRINT LEFT_PAR . logical_exp multi_print_statute RIGHT_PAR END_LINE
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    logical_exp                    shift and go to state 87
    factor                         shift and go to state 71
    cond_exp                       shift and go to state 73
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 62

    (8) local_var_dec -> type ID . local_multivar_dec END_LINE
    (9) local_multivar_dec -> . COMMA local_var_dec
    (10) local_multivar_dec -> . empty
    (2) empty -> .

    COMMA           shift and go to state 88
    END_LINE        reduce using rule 2 (empty -> .)

    empty                          shift and go to state 89
    local_multivar_dec             shift and go to state 90

state 63

    (44) array_assign_statute -> L_BRACKET . exp R_BRACKET
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 91
    term                           shift and go to state 68
    empty                          shift and go to state 70
    factor_2                       shift and go to state 74
    factor                         shift and go to state 71

state 64

    (43) assign_statute -> ID array_assign_statute . ASSIGN logical_exp END_LINE

    ASSIGN          shift and go to state 92


state 65

    (45) array_assign_statute -> empty .

    ASSIGN          reduce using rule 45 (array_assign_statute -> empty .)


state 66

    (64) draw_line -> LINE LEFT_PAR . logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    cond_exp                       shift and go to state 73
    logical_exp                    shift and go to state 93
    factor                         shift and go to state 71
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 67

    (77) cond_exp -> exp . cond_exp_2
    (78) cond_exp_2 -> . COND_OPERATOR exp
    (79) cond_exp_2 -> . empty
    (2) empty -> .

    COND_OPERATOR   shift and go to state 94
    LOGIC_OPERATOR  reduce using rule 2 (empty -> .)
    END_LINE        reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    empty                          shift and go to state 95
    cond_exp_2                     shift and go to state 96

state 68

    (80) exp -> term . exp_2
    (81) exp_2 -> . AS_OPERATOR term
    (82) exp_2 -> . empty
    (2) empty -> .

    AS_OPERATOR     shift and go to state 97
    COND_OPERATOR   reduce using rule 2 (empty -> .)
    LOGIC_OPERATOR  reduce using rule 2 (empty -> .)
    END_LINE        reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RIGHT_PAR       reduce using rule 2 (empty -> .)
    R_BRACKET       reduce using rule 2 (empty -> .)

    empty                          shift and go to state 98
    exp_2                          shift and go to state 99

state 69

    (51) return_statute -> RETURN logical_exp . END_LINE

    END_LINE        shift and go to state 100


state 70

    (89) factor_2 -> empty .

    INT             reduce using rule 89 (factor_2 -> empty .)
    FLOAT           reduce using rule 89 (factor_2 -> empty .)
    BOOLEAN         reduce using rule 89 (factor_2 -> empty .)
    ID              reduce using rule 89 (factor_2 -> empty .)


state 71

    (83) term -> factor . term_2
    (84) term_2 -> . MD_OPERATOR factor
    (85) term_2 -> . empty
    (2) empty -> .

    MD_OPERATOR     shift and go to state 101
    AS_OPERATOR     reduce using rule 2 (empty -> .)
    COND_OPERATOR   reduce using rule 2 (empty -> .)
    LOGIC_OPERATOR  reduce using rule 2 (empty -> .)
    END_LINE        reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RIGHT_PAR       reduce using rule 2 (empty -> .)
    R_BRACKET       reduce using rule 2 (empty -> .)

    term_2                         shift and go to state 102
    empty                          shift and go to state 103

state 72

    (86) factor -> LEFT_PAR . logical_exp RIGHT_PAR
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    cond_exp                       shift and go to state 73
    logical_exp                    shift and go to state 104
    factor                         shift and go to state 71
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 73

    (74) logical_exp -> cond_exp . logical_exp_2
    (75) logical_exp_2 -> . LOGIC_OPERATOR cond_exp
    (76) logical_exp_2 -> . empty
    (2) empty -> .

    LOGIC_OPERATOR  shift and go to state 105
    END_LINE        reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    empty                          shift and go to state 107
    logical_exp_2                  shift and go to state 106

state 74

    (87) factor -> factor_2 . const_var
    (90) const_var -> . data
    (91) const_var -> . id_oper
    (16) data -> . INT
    (17) data -> . FLOAT
    (18) data -> . BOOLEAN
    (92) id_oper -> . ID id_oper_2

    INT             shift and go to state 113
    FLOAT           shift and go to state 111
    BOOLEAN         shift and go to state 109
    ID              shift and go to state 108

    data                           shift and go to state 112
    id_oper                        shift and go to state 110
    const_var                      shift and go to state 114

state 75

    (88) factor_2 -> AS_OPERATOR .

    INT             reduce using rule 88 (factor_2 -> AS_OPERATOR .)
    FLOAT           reduce using rule 88 (factor_2 -> AS_OPERATOR .)
    BOOLEAN         reduce using rule 88 (factor_2 -> AS_OPERATOR .)
    ID              reduce using rule 88 (factor_2 -> AS_OPERATOR .)


state 76

    (49) while_statute -> WHILE LEFT_PAR . logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    logical_exp                    shift and go to state 115
    factor                         shift and go to state 71
    cond_exp                       shift and go to state 73
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 77

    (59) draw_point -> DOT LEFT_PAR . logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    logical_exp                    shift and go to state 116
    factor                         shift and go to state 71
    cond_exp                       shift and go to state 73
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 78

    (23) function_call -> CALL ID . LEFT_PAR exp cm_2 RIGHT_PAR END_LINE

    LEFT_PAR        shift and go to state 117


state 79

    (11) code_statute -> statute code_statute .

    R_BRACE         reduce using rule 11 (code_statute -> statute code_statute .)


state 80

    (1) program -> PROGRAM ID END_LINE global_variable_dec function_dec L_BRACE code_statute R_BRACE .

    $end            reduce using rule 1 (program -> PROGRAM ID END_LINE global_variable_dec function_dec L_BRACE code_statute R_BRACE .)


state 81

    (28) params -> type . ID param_array params_multi

    ID              shift and go to state 118


state 82

    (21) function_dec -> DEFINE type ID LEFT_PAR params . RIGHT_PAR L_BRACE code_statute R_BRACE

    RIGHT_PAR       shift and go to state 119


state 83

    (29) params -> empty .

    RIGHT_PAR       reduce using rule 29 (params -> empty .)


state 84

    (69) draw_curve -> CURVE LEFT_PAR logical_exp . COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE

    COMMA           shift and go to state 120


state 85

    (50) do_while_statute -> DO L_BRACE code_statute . R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE

    R_BRACE         shift and go to state 121


state 86

    (46) if_statute -> IF LEFT_PAR logical_exp . RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE

    RIGHT_PAR       shift and go to state 122


state 87

    (52) print_statute -> PRINT LEFT_PAR logical_exp . multi_print_statute RIGHT_PAR END_LINE
    (53) multi_print_statute -> . COMMA logical_exp print_2
    (54) multi_print_statute -> . empty
    (2) empty -> .

    COMMA           shift and go to state 124
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    multi_print_statute            shift and go to state 123
    empty                          shift and go to state 125

state 88

    (9) local_multivar_dec -> COMMA . local_var_dec
    (8) local_var_dec -> . type ID local_multivar_dec END_LINE
    (13) type -> . TYPE_INT array_dec
    (14) type -> . TYPE_FLOAT array_dec
    (15) type -> . TYPE_BOOLEAN array_dec

    TYPE_INT        shift and go to state 11
    TYPE_FLOAT      shift and go to state 6
    TYPE_BOOLEAN    shift and go to state 10

    type                           shift and go to state 38
    local_var_dec                  shift and go to state 126

state 89

    (10) local_multivar_dec -> empty .

    END_LINE        reduce using rule 10 (local_multivar_dec -> empty .)


state 90

    (8) local_var_dec -> type ID local_multivar_dec . END_LINE

    END_LINE        shift and go to state 127


state 91

    (44) array_assign_statute -> L_BRACKET exp . R_BRACKET

    R_BRACKET       shift and go to state 128


state 92

    (43) assign_statute -> ID array_assign_statute ASSIGN . logical_exp END_LINE
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    logical_exp                    shift and go to state 129
    factor                         shift and go to state 71
    cond_exp                       shift and go to state 73
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 93

    (64) draw_line -> LINE LEFT_PAR logical_exp . COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE

    COMMA           shift and go to state 130


state 94

    (78) cond_exp_2 -> COND_OPERATOR . exp
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 131
    term                           shift and go to state 68
    empty                          shift and go to state 70
    factor_2                       shift and go to state 74
    factor                         shift and go to state 71

state 95

    (79) cond_exp_2 -> empty .

    LOGIC_OPERATOR  reduce using rule 79 (cond_exp_2 -> empty .)
    END_LINE        reduce using rule 79 (cond_exp_2 -> empty .)
    COMMA           reduce using rule 79 (cond_exp_2 -> empty .)
    RIGHT_PAR       reduce using rule 79 (cond_exp_2 -> empty .)


state 96

    (77) cond_exp -> exp cond_exp_2 .

    LOGIC_OPERATOR  reduce using rule 77 (cond_exp -> exp cond_exp_2 .)
    COMMA           reduce using rule 77 (cond_exp -> exp cond_exp_2 .)
    RIGHT_PAR       reduce using rule 77 (cond_exp -> exp cond_exp_2 .)
    END_LINE        reduce using rule 77 (cond_exp -> exp cond_exp_2 .)


state 97

    (81) exp_2 -> AS_OPERATOR . term
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    term                           shift and go to state 132
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70
    factor                         shift and go to state 71

state 98

    (82) exp_2 -> empty .

    COND_OPERATOR   reduce using rule 82 (exp_2 -> empty .)
    LOGIC_OPERATOR  reduce using rule 82 (exp_2 -> empty .)
    END_LINE        reduce using rule 82 (exp_2 -> empty .)
    COMMA           reduce using rule 82 (exp_2 -> empty .)
    RIGHT_PAR       reduce using rule 82 (exp_2 -> empty .)
    R_BRACKET       reduce using rule 82 (exp_2 -> empty .)


state 99

    (80) exp -> term exp_2 .

    R_BRACKET       reduce using rule 80 (exp -> term exp_2 .)
    LOGIC_OPERATOR  reduce using rule 80 (exp -> term exp_2 .)
    END_LINE        reduce using rule 80 (exp -> term exp_2 .)
    COMMA           reduce using rule 80 (exp -> term exp_2 .)
    RIGHT_PAR       reduce using rule 80 (exp -> term exp_2 .)
    COND_OPERATOR   reduce using rule 80 (exp -> term exp_2 .)


state 100

    (51) return_statute -> RETURN logical_exp END_LINE .

    ID              reduce using rule 51 (return_statute -> RETURN logical_exp END_LINE .)
    IF              reduce using rule 51 (return_statute -> RETURN logical_exp END_LINE .)
    WHILE           reduce using rule 51 (return_statute -> RETURN logical_exp END_LINE .)
    DO              reduce using rule 51 (return_statute -> RETURN logical_exp END_LINE .)
    RETURN          reduce using rule 51 (return_statute -> RETURN logical_exp END_LINE .)
    PRINT           reduce using rule 51 (return_statute -> RETURN logical_exp END_LINE .)
    CALL            reduce using rule 51 (return_statute -> RETURN logical_exp END_LINE .)
    DOT             reduce using rule 51 (return_statute -> RETURN logical_exp END_LINE .)
    LINE            reduce using rule 51 (return_statute -> RETURN logical_exp END_LINE .)
    CURVE           reduce using rule 51 (return_statute -> RETURN logical_exp END_LINE .)
    TYPE_INT        reduce using rule 51 (return_statute -> RETURN logical_exp END_LINE .)
    TYPE_FLOAT      reduce using rule 51 (return_statute -> RETURN logical_exp END_LINE .)
    TYPE_BOOLEAN    reduce using rule 51 (return_statute -> RETURN logical_exp END_LINE .)
    R_BRACE         reduce using rule 51 (return_statute -> RETURN logical_exp END_LINE .)


state 101

    (84) term_2 -> MD_OPERATOR . factor
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    factor_2                       shift and go to state 74
    empty                          shift and go to state 70
    factor                         shift and go to state 133

state 102

    (83) term -> factor term_2 .

    AS_OPERATOR     reduce using rule 83 (term -> factor term_2 .)
    COND_OPERATOR   reduce using rule 83 (term -> factor term_2 .)
    LOGIC_OPERATOR  reduce using rule 83 (term -> factor term_2 .)
    END_LINE        reduce using rule 83 (term -> factor term_2 .)
    R_BRACKET       reduce using rule 83 (term -> factor term_2 .)
    RIGHT_PAR       reduce using rule 83 (term -> factor term_2 .)
    COMMA           reduce using rule 83 (term -> factor term_2 .)


state 103

    (85) term_2 -> empty .

    AS_OPERATOR     reduce using rule 85 (term_2 -> empty .)
    COND_OPERATOR   reduce using rule 85 (term_2 -> empty .)
    LOGIC_OPERATOR  reduce using rule 85 (term_2 -> empty .)
    END_LINE        reduce using rule 85 (term_2 -> empty .)
    COMMA           reduce using rule 85 (term_2 -> empty .)
    RIGHT_PAR       reduce using rule 85 (term_2 -> empty .)
    R_BRACKET       reduce using rule 85 (term_2 -> empty .)


state 104

    (86) factor -> LEFT_PAR logical_exp . RIGHT_PAR

    RIGHT_PAR       shift and go to state 134


state 105

    (75) logical_exp_2 -> LOGIC_OPERATOR . cond_exp
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    empty                          shift and go to state 70
    factor_2                       shift and go to state 74
    cond_exp                       shift and go to state 135
    factor                         shift and go to state 71

state 106

    (74) logical_exp -> cond_exp logical_exp_2 .

    COMMA           reduce using rule 74 (logical_exp -> cond_exp logical_exp_2 .)
    RIGHT_PAR       reduce using rule 74 (logical_exp -> cond_exp logical_exp_2 .)
    END_LINE        reduce using rule 74 (logical_exp -> cond_exp logical_exp_2 .)


state 107

    (76) logical_exp_2 -> empty .

    END_LINE        reduce using rule 76 (logical_exp_2 -> empty .)
    COMMA           reduce using rule 76 (logical_exp_2 -> empty .)
    RIGHT_PAR       reduce using rule 76 (logical_exp_2 -> empty .)


state 108

    (92) id_oper -> ID . id_oper_2
    (93) id_oper_2 -> . L_BRACKET exp R_BRACKET
    (94) id_oper_2 -> . LEFT_PAR id_oper_3 RIGHT_PAR
    (95) id_oper_2 -> . empty
    (2) empty -> .

    L_BRACKET       shift and go to state 137
    LEFT_PAR        shift and go to state 136
    MD_OPERATOR     reduce using rule 2 (empty -> .)
    AS_OPERATOR     reduce using rule 2 (empty -> .)
    COND_OPERATOR   reduce using rule 2 (empty -> .)
    LOGIC_OPERATOR  reduce using rule 2 (empty -> .)
    END_LINE        reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RIGHT_PAR       reduce using rule 2 (empty -> .)
    R_BRACKET       reduce using rule 2 (empty -> .)

    id_oper_2                      shift and go to state 138
    empty                          shift and go to state 139

state 109

    (18) data -> BOOLEAN .

    MD_OPERATOR     reduce using rule 18 (data -> BOOLEAN .)
    AS_OPERATOR     reduce using rule 18 (data -> BOOLEAN .)
    COND_OPERATOR   reduce using rule 18 (data -> BOOLEAN .)
    LOGIC_OPERATOR  reduce using rule 18 (data -> BOOLEAN .)
    END_LINE        reduce using rule 18 (data -> BOOLEAN .)
    COMMA           reduce using rule 18 (data -> BOOLEAN .)
    RIGHT_PAR       reduce using rule 18 (data -> BOOLEAN .)
    R_BRACKET       reduce using rule 18 (data -> BOOLEAN .)


state 110

    (91) const_var -> id_oper .

    MD_OPERATOR     reduce using rule 91 (const_var -> id_oper .)
    AS_OPERATOR     reduce using rule 91 (const_var -> id_oper .)
    COND_OPERATOR   reduce using rule 91 (const_var -> id_oper .)
    LOGIC_OPERATOR  reduce using rule 91 (const_var -> id_oper .)
    END_LINE        reduce using rule 91 (const_var -> id_oper .)
    COMMA           reduce using rule 91 (const_var -> id_oper .)
    RIGHT_PAR       reduce using rule 91 (const_var -> id_oper .)
    R_BRACKET       reduce using rule 91 (const_var -> id_oper .)


state 111

    (17) data -> FLOAT .

    MD_OPERATOR     reduce using rule 17 (data -> FLOAT .)
    AS_OPERATOR     reduce using rule 17 (data -> FLOAT .)
    COND_OPERATOR   reduce using rule 17 (data -> FLOAT .)
    LOGIC_OPERATOR  reduce using rule 17 (data -> FLOAT .)
    END_LINE        reduce using rule 17 (data -> FLOAT .)
    COMMA           reduce using rule 17 (data -> FLOAT .)
    RIGHT_PAR       reduce using rule 17 (data -> FLOAT .)
    R_BRACKET       reduce using rule 17 (data -> FLOAT .)


state 112

    (90) const_var -> data .

    MD_OPERATOR     reduce using rule 90 (const_var -> data .)
    AS_OPERATOR     reduce using rule 90 (const_var -> data .)
    COND_OPERATOR   reduce using rule 90 (const_var -> data .)
    LOGIC_OPERATOR  reduce using rule 90 (const_var -> data .)
    END_LINE        reduce using rule 90 (const_var -> data .)
    COMMA           reduce using rule 90 (const_var -> data .)
    RIGHT_PAR       reduce using rule 90 (const_var -> data .)
    R_BRACKET       reduce using rule 90 (const_var -> data .)


state 113

    (16) data -> INT .

    MD_OPERATOR     reduce using rule 16 (data -> INT .)
    AS_OPERATOR     reduce using rule 16 (data -> INT .)
    COND_OPERATOR   reduce using rule 16 (data -> INT .)
    LOGIC_OPERATOR  reduce using rule 16 (data -> INT .)
    END_LINE        reduce using rule 16 (data -> INT .)
    COMMA           reduce using rule 16 (data -> INT .)
    RIGHT_PAR       reduce using rule 16 (data -> INT .)
    R_BRACKET       reduce using rule 16 (data -> INT .)


state 114

    (87) factor -> factor_2 const_var .

    MD_OPERATOR     reduce using rule 87 (factor -> factor_2 const_var .)
    AS_OPERATOR     reduce using rule 87 (factor -> factor_2 const_var .)
    LOGIC_OPERATOR  reduce using rule 87 (factor -> factor_2 const_var .)
    END_LINE        reduce using rule 87 (factor -> factor_2 const_var .)
    COMMA           reduce using rule 87 (factor -> factor_2 const_var .)
    RIGHT_PAR       reduce using rule 87 (factor -> factor_2 const_var .)
    COND_OPERATOR   reduce using rule 87 (factor -> factor_2 const_var .)
    R_BRACKET       reduce using rule 87 (factor -> factor_2 const_var .)


state 115

    (49) while_statute -> WHILE LEFT_PAR logical_exp . RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE

    RIGHT_PAR       shift and go to state 140


state 116

    (59) draw_point -> DOT LEFT_PAR logical_exp . COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE

    COMMA           shift and go to state 141


state 117

    (23) function_call -> CALL ID LEFT_PAR . exp cm_2 RIGHT_PAR END_LINE
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 142
    term                           shift and go to state 68
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70
    factor                         shift and go to state 71

state 118

    (28) params -> type ID . param_array params_multi
    (30) param_array -> . L_BRACKET exp R_BRACKET
    (31) param_array -> . empty
    (2) empty -> .

    L_BRACKET       shift and go to state 144
    COMMA           reduce using rule 2 (empty -> .)
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    param_array                    shift and go to state 143
    empty                          shift and go to state 145

state 119

    (21) function_dec -> DEFINE type ID LEFT_PAR params RIGHT_PAR . L_BRACE code_statute R_BRACE

    L_BRACE         shift and go to state 146


state 120

    (69) draw_curve -> CURVE LEFT_PAR logical_exp COMMA . logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    logical_exp                    shift and go to state 147
    factor                         shift and go to state 71
    cond_exp                       shift and go to state 73
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 121

    (50) do_while_statute -> DO L_BRACE code_statute R_BRACE . WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE

    WHILE           shift and go to state 148


state 122

    (46) if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR . L_BRACE code_statute R_BRACE if_else END_LINE

    L_BRACE         shift and go to state 149


state 123

    (52) print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute . RIGHT_PAR END_LINE

    RIGHT_PAR       shift and go to state 150


state 124

    (53) multi_print_statute -> COMMA . logical_exp print_2
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    logical_exp                    shift and go to state 151
    factor                         shift and go to state 71
    cond_exp                       shift and go to state 73
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 125

    (54) multi_print_statute -> empty .

    RIGHT_PAR       reduce using rule 54 (multi_print_statute -> empty .)


state 126

    (9) local_multivar_dec -> COMMA local_var_dec .

    END_LINE        reduce using rule 9 (local_multivar_dec -> COMMA local_var_dec .)


state 127

    (8) local_var_dec -> type ID local_multivar_dec END_LINE .

    ID              reduce using rule 8 (local_var_dec -> type ID local_multivar_dec END_LINE .)
    IF              reduce using rule 8 (local_var_dec -> type ID local_multivar_dec END_LINE .)
    WHILE           reduce using rule 8 (local_var_dec -> type ID local_multivar_dec END_LINE .)
    DO              reduce using rule 8 (local_var_dec -> type ID local_multivar_dec END_LINE .)
    RETURN          reduce using rule 8 (local_var_dec -> type ID local_multivar_dec END_LINE .)
    PRINT           reduce using rule 8 (local_var_dec -> type ID local_multivar_dec END_LINE .)
    CALL            reduce using rule 8 (local_var_dec -> type ID local_multivar_dec END_LINE .)
    DOT             reduce using rule 8 (local_var_dec -> type ID local_multivar_dec END_LINE .)
    LINE            reduce using rule 8 (local_var_dec -> type ID local_multivar_dec END_LINE .)
    CURVE           reduce using rule 8 (local_var_dec -> type ID local_multivar_dec END_LINE .)
    TYPE_INT        reduce using rule 8 (local_var_dec -> type ID local_multivar_dec END_LINE .)
    TYPE_FLOAT      reduce using rule 8 (local_var_dec -> type ID local_multivar_dec END_LINE .)
    TYPE_BOOLEAN    reduce using rule 8 (local_var_dec -> type ID local_multivar_dec END_LINE .)
    R_BRACE         reduce using rule 8 (local_var_dec -> type ID local_multivar_dec END_LINE .)
    END_LINE        reduce using rule 8 (local_var_dec -> type ID local_multivar_dec END_LINE .)


state 128

    (44) array_assign_statute -> L_BRACKET exp R_BRACKET .

    ASSIGN          reduce using rule 44 (array_assign_statute -> L_BRACKET exp R_BRACKET .)


state 129

    (43) assign_statute -> ID array_assign_statute ASSIGN logical_exp . END_LINE

    END_LINE        shift and go to state 152


state 130

    (64) draw_line -> LINE LEFT_PAR logical_exp COMMA . logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    cond_exp                       shift and go to state 73
    logical_exp                    shift and go to state 153
    factor                         shift and go to state 71
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 131

    (78) cond_exp_2 -> COND_OPERATOR exp .

    LOGIC_OPERATOR  reduce using rule 78 (cond_exp_2 -> COND_OPERATOR exp .)
    END_LINE        reduce using rule 78 (cond_exp_2 -> COND_OPERATOR exp .)
    COMMA           reduce using rule 78 (cond_exp_2 -> COND_OPERATOR exp .)
    RIGHT_PAR       reduce using rule 78 (cond_exp_2 -> COND_OPERATOR exp .)


state 132

    (81) exp_2 -> AS_OPERATOR term .

    COND_OPERATOR   reduce using rule 81 (exp_2 -> AS_OPERATOR term .)
    LOGIC_OPERATOR  reduce using rule 81 (exp_2 -> AS_OPERATOR term .)
    END_LINE        reduce using rule 81 (exp_2 -> AS_OPERATOR term .)
    COMMA           reduce using rule 81 (exp_2 -> AS_OPERATOR term .)
    RIGHT_PAR       reduce using rule 81 (exp_2 -> AS_OPERATOR term .)
    R_BRACKET       reduce using rule 81 (exp_2 -> AS_OPERATOR term .)


state 133

    (84) term_2 -> MD_OPERATOR factor .

    AS_OPERATOR     reduce using rule 84 (term_2 -> MD_OPERATOR factor .)
    COND_OPERATOR   reduce using rule 84 (term_2 -> MD_OPERATOR factor .)
    LOGIC_OPERATOR  reduce using rule 84 (term_2 -> MD_OPERATOR factor .)
    END_LINE        reduce using rule 84 (term_2 -> MD_OPERATOR factor .)
    COMMA           reduce using rule 84 (term_2 -> MD_OPERATOR factor .)
    RIGHT_PAR       reduce using rule 84 (term_2 -> MD_OPERATOR factor .)
    R_BRACKET       reduce using rule 84 (term_2 -> MD_OPERATOR factor .)


state 134

    (86) factor -> LEFT_PAR logical_exp RIGHT_PAR .

    MD_OPERATOR     reduce using rule 86 (factor -> LEFT_PAR logical_exp RIGHT_PAR .)
    AS_OPERATOR     reduce using rule 86 (factor -> LEFT_PAR logical_exp RIGHT_PAR .)
    LOGIC_OPERATOR  reduce using rule 86 (factor -> LEFT_PAR logical_exp RIGHT_PAR .)
    END_LINE        reduce using rule 86 (factor -> LEFT_PAR logical_exp RIGHT_PAR .)
    COMMA           reduce using rule 86 (factor -> LEFT_PAR logical_exp RIGHT_PAR .)
    RIGHT_PAR       reduce using rule 86 (factor -> LEFT_PAR logical_exp RIGHT_PAR .)
    COND_OPERATOR   reduce using rule 86 (factor -> LEFT_PAR logical_exp RIGHT_PAR .)
    R_BRACKET       reduce using rule 86 (factor -> LEFT_PAR logical_exp RIGHT_PAR .)


state 135

    (75) logical_exp_2 -> LOGIC_OPERATOR cond_exp .

    END_LINE        reduce using rule 75 (logical_exp_2 -> LOGIC_OPERATOR cond_exp .)
    COMMA           reduce using rule 75 (logical_exp_2 -> LOGIC_OPERATOR cond_exp .)
    RIGHT_PAR       reduce using rule 75 (logical_exp_2 -> LOGIC_OPERATOR cond_exp .)


state 136

    (94) id_oper_2 -> LEFT_PAR . id_oper_3 RIGHT_PAR
    (96) id_oper_3 -> . exp id_oper_multi
    (97) id_oper_3 -> . empty
    (80) exp -> . term exp_2
    (2) empty -> .
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty

    RIGHT_PAR       reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75

    exp                            shift and go to state 154
    term                           shift and go to state 68
    factor_2                       shift and go to state 74
    id_oper_3                      shift and go to state 155
    empty                          shift and go to state 156
    factor                         shift and go to state 71

state 137

    (93) id_oper_2 -> L_BRACKET . exp R_BRACKET
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 157
    term                           shift and go to state 68
    empty                          shift and go to state 70
    factor_2                       shift and go to state 74
    factor                         shift and go to state 71

state 138

    (92) id_oper -> ID id_oper_2 .

    MD_OPERATOR     reduce using rule 92 (id_oper -> ID id_oper_2 .)
    AS_OPERATOR     reduce using rule 92 (id_oper -> ID id_oper_2 .)
    COND_OPERATOR   reduce using rule 92 (id_oper -> ID id_oper_2 .)
    LOGIC_OPERATOR  reduce using rule 92 (id_oper -> ID id_oper_2 .)
    END_LINE        reduce using rule 92 (id_oper -> ID id_oper_2 .)
    COMMA           reduce using rule 92 (id_oper -> ID id_oper_2 .)
    RIGHT_PAR       reduce using rule 92 (id_oper -> ID id_oper_2 .)
    R_BRACKET       reduce using rule 92 (id_oper -> ID id_oper_2 .)


state 139

    (95) id_oper_2 -> empty .

    MD_OPERATOR     reduce using rule 95 (id_oper_2 -> empty .)
    AS_OPERATOR     reduce using rule 95 (id_oper_2 -> empty .)
    COND_OPERATOR   reduce using rule 95 (id_oper_2 -> empty .)
    LOGIC_OPERATOR  reduce using rule 95 (id_oper_2 -> empty .)
    END_LINE        reduce using rule 95 (id_oper_2 -> empty .)
    COMMA           reduce using rule 95 (id_oper_2 -> empty .)
    RIGHT_PAR       reduce using rule 95 (id_oper_2 -> empty .)
    R_BRACKET       reduce using rule 95 (id_oper_2 -> empty .)


state 140

    (49) while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR . L_BRACE code_statute R_BRACE END_LINE

    L_BRACE         shift and go to state 158


state 141

    (59) draw_point -> DOT LEFT_PAR logical_exp COMMA . logical_exp point_extra_1 RIGHT_PAR END_LINE
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    logical_exp                    shift and go to state 159
    factor                         shift and go to state 71
    cond_exp                       shift and go to state 73
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 142

    (23) function_call -> CALL ID LEFT_PAR exp . cm_2 RIGHT_PAR END_LINE
    (24) cm_2 -> . COMMA call_multi
    (25) cm_2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 161
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    cm_2                           shift and go to state 160
    empty                          shift and go to state 162

state 143

    (28) params -> type ID param_array . params_multi
    (32) params_multi -> . COMMA params
    (33) params_multi -> . empty
    (2) empty -> .

    COMMA           shift and go to state 163
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    empty                          shift and go to state 164
    params_multi                   shift and go to state 165

state 144

    (30) param_array -> L_BRACKET . exp R_BRACKET
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 166
    term                           shift and go to state 68
    empty                          shift and go to state 70
    factor_2                       shift and go to state 74
    factor                         shift and go to state 71

state 145

    (31) param_array -> empty .

    COMMA           reduce using rule 31 (param_array -> empty .)
    RIGHT_PAR       reduce using rule 31 (param_array -> empty .)


state 146

    (21) function_dec -> DEFINE type ID LEFT_PAR params RIGHT_PAR L_BRACE . code_statute R_BRACE
    (11) code_statute -> . statute code_statute
    (12) code_statute -> . empty
    (34) statute -> . assign_statute
    (35) statute -> . if_statute
    (36) statute -> . while_statute
    (37) statute -> . do_while_statute
    (38) statute -> . return_statute
    (39) statute -> . print_statute
    (40) statute -> . draw_statute
    (41) statute -> . local_var_dec
    (42) statute -> . function_call
    (2) empty -> .
    (43) assign_statute -> . ID array_assign_statute ASSIGN logical_exp END_LINE
    (46) if_statute -> . IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE
    (49) while_statute -> . WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE
    (50) do_while_statute -> . DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE
    (51) return_statute -> . RETURN logical_exp END_LINE
    (52) print_statute -> . PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE
    (56) draw_statute -> . draw_point
    (57) draw_statute -> . draw_line
    (58) draw_statute -> . draw_curve
    (8) local_var_dec -> . type ID local_multivar_dec END_LINE
    (23) function_call -> . CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE
    (59) draw_point -> . DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE
    (64) draw_line -> . LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE
    (69) draw_curve -> . CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE
    (13) type -> . TYPE_INT array_dec
    (14) type -> . TYPE_FLOAT array_dec
    (15) type -> . TYPE_BOOLEAN array_dec

    R_BRACE         reduce using rule 2 (empty -> .)
    ID              shift and go to state 39
    IF              shift and go to state 34
    WHILE           shift and go to state 45
    DO              shift and go to state 31
    RETURN          shift and go to state 44
    PRINT           shift and go to state 36
    CALL            shift and go to state 50
    DOT             shift and go to state 48
    LINE            shift and go to state 42
    CURVE           shift and go to state 30
    TYPE_INT        shift and go to state 11
    TYPE_FLOAT      shift and go to state 6
    TYPE_BOOLEAN    shift and go to state 10

    function_call                  shift and go to state 29
    draw_line                      shift and go to state 41
    draw_statute                   shift and go to state 33
    draw_point                     shift and go to state 40
    while_statute                  shift and go to state 32
    return_statute                 shift and go to state 43
    do_while_statute               shift and go to state 35
    assign_statute                 shift and go to state 46
    draw_curve                     shift and go to state 47
    if_statute                     shift and go to state 49
    print_statute                  shift and go to state 37
    statute                        shift and go to state 51
    empty                          shift and go to state 52
    type                           shift and go to state 38
    code_statute                   shift and go to state 167
    local_var_dec                  shift and go to state 54

state 147

    (69) draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp . COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE

    COMMA           shift and go to state 168


state 148

    (50) do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE . LEFT_PAR logical_exp RIGHT_PAR END_LINE

    LEFT_PAR        shift and go to state 169


state 149

    (46) if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE . code_statute R_BRACE if_else END_LINE
    (11) code_statute -> . statute code_statute
    (12) code_statute -> . empty
    (34) statute -> . assign_statute
    (35) statute -> . if_statute
    (36) statute -> . while_statute
    (37) statute -> . do_while_statute
    (38) statute -> . return_statute
    (39) statute -> . print_statute
    (40) statute -> . draw_statute
    (41) statute -> . local_var_dec
    (42) statute -> . function_call
    (2) empty -> .
    (43) assign_statute -> . ID array_assign_statute ASSIGN logical_exp END_LINE
    (46) if_statute -> . IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE
    (49) while_statute -> . WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE
    (50) do_while_statute -> . DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE
    (51) return_statute -> . RETURN logical_exp END_LINE
    (52) print_statute -> . PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE
    (56) draw_statute -> . draw_point
    (57) draw_statute -> . draw_line
    (58) draw_statute -> . draw_curve
    (8) local_var_dec -> . type ID local_multivar_dec END_LINE
    (23) function_call -> . CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE
    (59) draw_point -> . DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE
    (64) draw_line -> . LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE
    (69) draw_curve -> . CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE
    (13) type -> . TYPE_INT array_dec
    (14) type -> . TYPE_FLOAT array_dec
    (15) type -> . TYPE_BOOLEAN array_dec

    R_BRACE         reduce using rule 2 (empty -> .)
    ID              shift and go to state 39
    IF              shift and go to state 34
    WHILE           shift and go to state 45
    DO              shift and go to state 31
    RETURN          shift and go to state 44
    PRINT           shift and go to state 36
    CALL            shift and go to state 50
    DOT             shift and go to state 48
    LINE            shift and go to state 42
    CURVE           shift and go to state 30
    TYPE_INT        shift and go to state 11
    TYPE_FLOAT      shift and go to state 6
    TYPE_BOOLEAN    shift and go to state 10

    function_call                  shift and go to state 29
    draw_line                      shift and go to state 41
    draw_statute                   shift and go to state 33
    draw_point                     shift and go to state 40
    while_statute                  shift and go to state 32
    return_statute                 shift and go to state 43
    do_while_statute               shift and go to state 35
    assign_statute                 shift and go to state 46
    draw_curve                     shift and go to state 47
    if_statute                     shift and go to state 49
    print_statute                  shift and go to state 37
    statute                        shift and go to state 51
    empty                          shift and go to state 52
    type                           shift and go to state 38
    code_statute                   shift and go to state 170
    local_var_dec                  shift and go to state 54

state 150

    (52) print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR . END_LINE

    END_LINE        shift and go to state 171


state 151

    (53) multi_print_statute -> COMMA logical_exp . print_2
    (55) print_2 -> . multi_print_statute
    (53) multi_print_statute -> . COMMA logical_exp print_2
    (54) multi_print_statute -> . empty
    (2) empty -> .

    COMMA           shift and go to state 124
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    print_2                        shift and go to state 172
    multi_print_statute            shift and go to state 173
    empty                          shift and go to state 125

state 152

    (43) assign_statute -> ID array_assign_statute ASSIGN logical_exp END_LINE .

    ID              reduce using rule 43 (assign_statute -> ID array_assign_statute ASSIGN logical_exp END_LINE .)
    IF              reduce using rule 43 (assign_statute -> ID array_assign_statute ASSIGN logical_exp END_LINE .)
    WHILE           reduce using rule 43 (assign_statute -> ID array_assign_statute ASSIGN logical_exp END_LINE .)
    DO              reduce using rule 43 (assign_statute -> ID array_assign_statute ASSIGN logical_exp END_LINE .)
    RETURN          reduce using rule 43 (assign_statute -> ID array_assign_statute ASSIGN logical_exp END_LINE .)
    PRINT           reduce using rule 43 (assign_statute -> ID array_assign_statute ASSIGN logical_exp END_LINE .)
    CALL            reduce using rule 43 (assign_statute -> ID array_assign_statute ASSIGN logical_exp END_LINE .)
    DOT             reduce using rule 43 (assign_statute -> ID array_assign_statute ASSIGN logical_exp END_LINE .)
    LINE            reduce using rule 43 (assign_statute -> ID array_assign_statute ASSIGN logical_exp END_LINE .)
    CURVE           reduce using rule 43 (assign_statute -> ID array_assign_statute ASSIGN logical_exp END_LINE .)
    TYPE_INT        reduce using rule 43 (assign_statute -> ID array_assign_statute ASSIGN logical_exp END_LINE .)
    TYPE_FLOAT      reduce using rule 43 (assign_statute -> ID array_assign_statute ASSIGN logical_exp END_LINE .)
    TYPE_BOOLEAN    reduce using rule 43 (assign_statute -> ID array_assign_statute ASSIGN logical_exp END_LINE .)
    R_BRACE         reduce using rule 43 (assign_statute -> ID array_assign_statute ASSIGN logical_exp END_LINE .)


state 153

    (64) draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp . COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE

    COMMA           shift and go to state 174


state 154

    (96) id_oper_3 -> exp . id_oper_multi
    (98) id_oper_multi -> . COMMA exp id_multi_2
    (99) id_oper_multi -> . empty
    (2) empty -> .

    COMMA           shift and go to state 175
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    id_oper_multi                  shift and go to state 176
    empty                          shift and go to state 177

state 155

    (94) id_oper_2 -> LEFT_PAR id_oper_3 . RIGHT_PAR

    RIGHT_PAR       shift and go to state 178


state 156

    (97) id_oper_3 -> empty .
    (89) factor_2 -> empty .

    RIGHT_PAR       reduce using rule 97 (id_oper_3 -> empty .)
    INT             reduce using rule 89 (factor_2 -> empty .)
    FLOAT           reduce using rule 89 (factor_2 -> empty .)
    BOOLEAN         reduce using rule 89 (factor_2 -> empty .)
    ID              reduce using rule 89 (factor_2 -> empty .)


state 157

    (93) id_oper_2 -> L_BRACKET exp . R_BRACKET

    R_BRACKET       shift and go to state 179


state 158

    (49) while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE . code_statute R_BRACE END_LINE
    (11) code_statute -> . statute code_statute
    (12) code_statute -> . empty
    (34) statute -> . assign_statute
    (35) statute -> . if_statute
    (36) statute -> . while_statute
    (37) statute -> . do_while_statute
    (38) statute -> . return_statute
    (39) statute -> . print_statute
    (40) statute -> . draw_statute
    (41) statute -> . local_var_dec
    (42) statute -> . function_call
    (2) empty -> .
    (43) assign_statute -> . ID array_assign_statute ASSIGN logical_exp END_LINE
    (46) if_statute -> . IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE
    (49) while_statute -> . WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE
    (50) do_while_statute -> . DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE
    (51) return_statute -> . RETURN logical_exp END_LINE
    (52) print_statute -> . PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE
    (56) draw_statute -> . draw_point
    (57) draw_statute -> . draw_line
    (58) draw_statute -> . draw_curve
    (8) local_var_dec -> . type ID local_multivar_dec END_LINE
    (23) function_call -> . CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE
    (59) draw_point -> . DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE
    (64) draw_line -> . LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE
    (69) draw_curve -> . CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE
    (13) type -> . TYPE_INT array_dec
    (14) type -> . TYPE_FLOAT array_dec
    (15) type -> . TYPE_BOOLEAN array_dec

    R_BRACE         reduce using rule 2 (empty -> .)
    ID              shift and go to state 39
    IF              shift and go to state 34
    WHILE           shift and go to state 45
    DO              shift and go to state 31
    RETURN          shift and go to state 44
    PRINT           shift and go to state 36
    CALL            shift and go to state 50
    DOT             shift and go to state 48
    LINE            shift and go to state 42
    CURVE           shift and go to state 30
    TYPE_INT        shift and go to state 11
    TYPE_FLOAT      shift and go to state 6
    TYPE_BOOLEAN    shift and go to state 10

    function_call                  shift and go to state 29
    draw_line                      shift and go to state 41
    draw_statute                   shift and go to state 33
    draw_point                     shift and go to state 40
    while_statute                  shift and go to state 32
    return_statute                 shift and go to state 43
    do_while_statute               shift and go to state 35
    assign_statute                 shift and go to state 46
    draw_curve                     shift and go to state 47
    if_statute                     shift and go to state 49
    print_statute                  shift and go to state 37
    statute                        shift and go to state 51
    empty                          shift and go to state 52
    type                           shift and go to state 38
    code_statute                   shift and go to state 180
    local_var_dec                  shift and go to state 54

state 159

    (59) draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp . point_extra_1 RIGHT_PAR END_LINE
    (60) point_extra_1 -> . COMMA logical_exp point_extra_2
    (61) point_extra_1 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 182
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    point_extra_1                  shift and go to state 181
    empty                          shift and go to state 183

state 160

    (23) function_call -> CALL ID LEFT_PAR exp cm_2 . RIGHT_PAR END_LINE

    RIGHT_PAR       shift and go to state 184


state 161

    (24) cm_2 -> COMMA . call_multi
    (26) call_multi -> . exp cm_2
    (27) call_multi -> . empty
    (80) exp -> . term exp_2
    (2) empty -> .
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty

    RIGHT_PAR       reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75

    exp                            shift and go to state 185
    term                           shift and go to state 68
    call_multi                     shift and go to state 186
    factor_2                       shift and go to state 74
    factor                         shift and go to state 71
    empty                          shift and go to state 187

state 162

    (25) cm_2 -> empty .

    RIGHT_PAR       reduce using rule 25 (cm_2 -> empty .)


state 163

    (32) params_multi -> COMMA . params
    (28) params -> . type ID param_array params_multi
    (29) params -> . empty
    (13) type -> . TYPE_INT array_dec
    (14) type -> . TYPE_FLOAT array_dec
    (15) type -> . TYPE_BOOLEAN array_dec
    (2) empty -> .

    TYPE_INT        shift and go to state 11
    TYPE_FLOAT      shift and go to state 6
    TYPE_BOOLEAN    shift and go to state 10
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    type                           shift and go to state 81
    params                         shift and go to state 188
    empty                          shift and go to state 83

state 164

    (33) params_multi -> empty .

    RIGHT_PAR       reduce using rule 33 (params_multi -> empty .)


state 165

    (28) params -> type ID param_array params_multi .

    RIGHT_PAR       reduce using rule 28 (params -> type ID param_array params_multi .)


state 166

    (30) param_array -> L_BRACKET exp . R_BRACKET

    R_BRACKET       shift and go to state 189


state 167

    (21) function_dec -> DEFINE type ID LEFT_PAR params RIGHT_PAR L_BRACE code_statute . R_BRACE

    R_BRACE         shift and go to state 190


state 168

    (69) draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA . logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    logical_exp                    shift and go to state 191
    factor                         shift and go to state 71
    cond_exp                       shift and go to state 73
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 169

    (50) do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR . logical_exp RIGHT_PAR END_LINE
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    logical_exp                    shift and go to state 192
    factor                         shift and go to state 71
    cond_exp                       shift and go to state 73
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 170

    (46) if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute . R_BRACE if_else END_LINE

    R_BRACE         shift and go to state 193


state 171

    (52) print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE .

    ID              reduce using rule 52 (print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE .)
    IF              reduce using rule 52 (print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE .)
    WHILE           reduce using rule 52 (print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE .)
    DO              reduce using rule 52 (print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE .)
    RETURN          reduce using rule 52 (print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE .)
    PRINT           reduce using rule 52 (print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE .)
    CALL            reduce using rule 52 (print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE .)
    DOT             reduce using rule 52 (print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE .)
    LINE            reduce using rule 52 (print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE .)
    CURVE           reduce using rule 52 (print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE .)
    TYPE_INT        reduce using rule 52 (print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE .)
    TYPE_FLOAT      reduce using rule 52 (print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE .)
    TYPE_BOOLEAN    reduce using rule 52 (print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE .)
    R_BRACE         reduce using rule 52 (print_statute -> PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE .)


state 172

    (53) multi_print_statute -> COMMA logical_exp print_2 .

    RIGHT_PAR       reduce using rule 53 (multi_print_statute -> COMMA logical_exp print_2 .)


state 173

    (55) print_2 -> multi_print_statute .

    RIGHT_PAR       reduce using rule 55 (print_2 -> multi_print_statute .)


state 174

    (64) draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA . logical_exp line_extra_1 RIGHT_PAR END_LINE
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    cond_exp                       shift and go to state 73
    logical_exp                    shift and go to state 194
    factor                         shift and go to state 71
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 175

    (98) id_oper_multi -> COMMA . exp id_multi_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 195
    term                           shift and go to state 68
    empty                          shift and go to state 70
    factor_2                       shift and go to state 74
    factor                         shift and go to state 71

state 176

    (96) id_oper_3 -> exp id_oper_multi .

    RIGHT_PAR       reduce using rule 96 (id_oper_3 -> exp id_oper_multi .)


state 177

    (99) id_oper_multi -> empty .

    RIGHT_PAR       reduce using rule 99 (id_oper_multi -> empty .)


state 178

    (94) id_oper_2 -> LEFT_PAR id_oper_3 RIGHT_PAR .

    MD_OPERATOR     reduce using rule 94 (id_oper_2 -> LEFT_PAR id_oper_3 RIGHT_PAR .)
    AS_OPERATOR     reduce using rule 94 (id_oper_2 -> LEFT_PAR id_oper_3 RIGHT_PAR .)
    COND_OPERATOR   reduce using rule 94 (id_oper_2 -> LEFT_PAR id_oper_3 RIGHT_PAR .)
    LOGIC_OPERATOR  reduce using rule 94 (id_oper_2 -> LEFT_PAR id_oper_3 RIGHT_PAR .)
    END_LINE        reduce using rule 94 (id_oper_2 -> LEFT_PAR id_oper_3 RIGHT_PAR .)
    COMMA           reduce using rule 94 (id_oper_2 -> LEFT_PAR id_oper_3 RIGHT_PAR .)
    RIGHT_PAR       reduce using rule 94 (id_oper_2 -> LEFT_PAR id_oper_3 RIGHT_PAR .)
    R_BRACKET       reduce using rule 94 (id_oper_2 -> LEFT_PAR id_oper_3 RIGHT_PAR .)


state 179

    (93) id_oper_2 -> L_BRACKET exp R_BRACKET .

    MD_OPERATOR     reduce using rule 93 (id_oper_2 -> L_BRACKET exp R_BRACKET .)
    AS_OPERATOR     reduce using rule 93 (id_oper_2 -> L_BRACKET exp R_BRACKET .)
    COND_OPERATOR   reduce using rule 93 (id_oper_2 -> L_BRACKET exp R_BRACKET .)
    LOGIC_OPERATOR  reduce using rule 93 (id_oper_2 -> L_BRACKET exp R_BRACKET .)
    END_LINE        reduce using rule 93 (id_oper_2 -> L_BRACKET exp R_BRACKET .)
    COMMA           reduce using rule 93 (id_oper_2 -> L_BRACKET exp R_BRACKET .)
    RIGHT_PAR       reduce using rule 93 (id_oper_2 -> L_BRACKET exp R_BRACKET .)
    R_BRACKET       reduce using rule 93 (id_oper_2 -> L_BRACKET exp R_BRACKET .)


state 180

    (49) while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute . R_BRACE END_LINE

    R_BRACE         shift and go to state 196


state 181

    (59) draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 . RIGHT_PAR END_LINE

    RIGHT_PAR       shift and go to state 197


state 182

    (60) point_extra_1 -> COMMA . logical_exp point_extra_2
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    logical_exp                    shift and go to state 198
    factor                         shift and go to state 71
    cond_exp                       shift and go to state 73
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 183

    (61) point_extra_1 -> empty .

    RIGHT_PAR       reduce using rule 61 (point_extra_1 -> empty .)


state 184

    (23) function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR . END_LINE

    END_LINE        shift and go to state 199


state 185

    (26) call_multi -> exp . cm_2
    (24) cm_2 -> . COMMA call_multi
    (25) cm_2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 161
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    cm_2                           shift and go to state 200
    empty                          shift and go to state 162

state 186

    (24) cm_2 -> COMMA call_multi .

    RIGHT_PAR       reduce using rule 24 (cm_2 -> COMMA call_multi .)


state 187

    (27) call_multi -> empty .
    (89) factor_2 -> empty .

    RIGHT_PAR       reduce using rule 27 (call_multi -> empty .)
    INT             reduce using rule 89 (factor_2 -> empty .)
    FLOAT           reduce using rule 89 (factor_2 -> empty .)
    BOOLEAN         reduce using rule 89 (factor_2 -> empty .)
    ID              reduce using rule 89 (factor_2 -> empty .)


state 188

    (32) params_multi -> COMMA params .

    RIGHT_PAR       reduce using rule 32 (params_multi -> COMMA params .)


state 189

    (30) param_array -> L_BRACKET exp R_BRACKET .

    COMMA           reduce using rule 30 (param_array -> L_BRACKET exp R_BRACKET .)
    RIGHT_PAR       reduce using rule 30 (param_array -> L_BRACKET exp R_BRACKET .)


state 190

    (21) function_dec -> DEFINE type ID LEFT_PAR params RIGHT_PAR L_BRACE code_statute R_BRACE .

    L_BRACE         reduce using rule 21 (function_dec -> DEFINE type ID LEFT_PAR params RIGHT_PAR L_BRACE code_statute R_BRACE .)


state 191

    (69) draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp . COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE

    COMMA           shift and go to state 201


state 192

    (50) do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp . RIGHT_PAR END_LINE

    RIGHT_PAR       shift and go to state 202


state 193

    (46) if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE . if_else END_LINE
    (47) if_else -> . ELSE L_BRACE code_statute R_BRACE
    (48) if_else -> . empty
    (2) empty -> .

    ELSE            shift and go to state 205
    END_LINE        reduce using rule 2 (empty -> .)

    if_else                        shift and go to state 203
    empty                          shift and go to state 204

state 194

    (64) draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp . line_extra_1 RIGHT_PAR END_LINE
    (65) line_extra_1 -> . COMMA logical_exp line_extra_2
    (66) line_extra_1 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 206
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    line_extra_1                   shift and go to state 207
    empty                          shift and go to state 208

state 195

    (98) id_oper_multi -> COMMA exp . id_multi_2
    (100) id_multi_2 -> . id_oper_multi
    (98) id_oper_multi -> . COMMA exp id_multi_2
    (99) id_oper_multi -> . empty
    (2) empty -> .

    COMMA           shift and go to state 175
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    id_multi_2                     shift and go to state 209
    id_oper_multi                  shift and go to state 210
    empty                          shift and go to state 177

state 196

    (49) while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE . END_LINE

    END_LINE        shift and go to state 211


state 197

    (59) draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR . END_LINE

    END_LINE        shift and go to state 212


state 198

    (60) point_extra_1 -> COMMA logical_exp . point_extra_2
    (62) point_extra_2 -> . COMMA logical_exp
    (63) point_extra_2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 214
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    point_extra_2                  shift and go to state 213
    empty                          shift and go to state 215

state 199

    (23) function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE .

    ID              reduce using rule 23 (function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE .)
    IF              reduce using rule 23 (function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE .)
    WHILE           reduce using rule 23 (function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE .)
    DO              reduce using rule 23 (function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE .)
    RETURN          reduce using rule 23 (function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE .)
    PRINT           reduce using rule 23 (function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE .)
    CALL            reduce using rule 23 (function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE .)
    DOT             reduce using rule 23 (function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE .)
    LINE            reduce using rule 23 (function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE .)
    CURVE           reduce using rule 23 (function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE .)
    TYPE_INT        reduce using rule 23 (function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE .)
    TYPE_FLOAT      reduce using rule 23 (function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE .)
    TYPE_BOOLEAN    reduce using rule 23 (function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE .)
    R_BRACE         reduce using rule 23 (function_call -> CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE .)


state 200

    (26) call_multi -> exp cm_2 .

    RIGHT_PAR       reduce using rule 26 (call_multi -> exp cm_2 .)


state 201

    (69) draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA . logical_exp curve_extra_1 RIGHT_PAR END_LINE
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    logical_exp                    shift and go to state 216
    factor                         shift and go to state 71
    cond_exp                       shift and go to state 73
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 202

    (50) do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR . END_LINE

    END_LINE        shift and go to state 217


state 203

    (46) if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else . END_LINE

    END_LINE        shift and go to state 218


state 204

    (48) if_else -> empty .

    END_LINE        reduce using rule 48 (if_else -> empty .)


state 205

    (47) if_else -> ELSE . L_BRACE code_statute R_BRACE

    L_BRACE         shift and go to state 219


state 206

    (65) line_extra_1 -> COMMA . logical_exp line_extra_2
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    logical_exp                    shift and go to state 220
    factor                         shift and go to state 71
    cond_exp                       shift and go to state 73
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 207

    (64) draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 . RIGHT_PAR END_LINE

    RIGHT_PAR       shift and go to state 221


state 208

    (66) line_extra_1 -> empty .

    RIGHT_PAR       reduce using rule 66 (line_extra_1 -> empty .)


state 209

    (98) id_oper_multi -> COMMA exp id_multi_2 .

    RIGHT_PAR       reduce using rule 98 (id_oper_multi -> COMMA exp id_multi_2 .)


state 210

    (100) id_multi_2 -> id_oper_multi .

    RIGHT_PAR       reduce using rule 100 (id_multi_2 -> id_oper_multi .)


state 211

    (49) while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE .

    ID              reduce using rule 49 (while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE .)
    IF              reduce using rule 49 (while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE .)
    WHILE           reduce using rule 49 (while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE .)
    DO              reduce using rule 49 (while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE .)
    RETURN          reduce using rule 49 (while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE .)
    PRINT           reduce using rule 49 (while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE .)
    CALL            reduce using rule 49 (while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE .)
    DOT             reduce using rule 49 (while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE .)
    LINE            reduce using rule 49 (while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE .)
    CURVE           reduce using rule 49 (while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE .)
    TYPE_INT        reduce using rule 49 (while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE .)
    TYPE_FLOAT      reduce using rule 49 (while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE .)
    TYPE_BOOLEAN    reduce using rule 49 (while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE .)
    R_BRACE         reduce using rule 49 (while_statute -> WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE .)


state 212

    (59) draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE .

    ID              reduce using rule 59 (draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE .)
    IF              reduce using rule 59 (draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE .)
    WHILE           reduce using rule 59 (draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE .)
    DO              reduce using rule 59 (draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE .)
    RETURN          reduce using rule 59 (draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE .)
    PRINT           reduce using rule 59 (draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE .)
    CALL            reduce using rule 59 (draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE .)
    DOT             reduce using rule 59 (draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE .)
    LINE            reduce using rule 59 (draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE .)
    CURVE           reduce using rule 59 (draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE .)
    TYPE_INT        reduce using rule 59 (draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE .)
    TYPE_FLOAT      reduce using rule 59 (draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE .)
    TYPE_BOOLEAN    reduce using rule 59 (draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE .)
    R_BRACE         reduce using rule 59 (draw_point -> DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE .)


state 213

    (60) point_extra_1 -> COMMA logical_exp point_extra_2 .

    RIGHT_PAR       reduce using rule 60 (point_extra_1 -> COMMA logical_exp point_extra_2 .)


state 214

    (62) point_extra_2 -> COMMA . logical_exp
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    cond_exp                       shift and go to state 73
    logical_exp                    shift and go to state 222
    factor                         shift and go to state 71
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 215

    (63) point_extra_2 -> empty .

    RIGHT_PAR       reduce using rule 63 (point_extra_2 -> empty .)


state 216

    (69) draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp . curve_extra_1 RIGHT_PAR END_LINE
    (70) curve_extra_1 -> . COMMA logical_exp curve_extra_2
    (71) curve_extra_1 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 223
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    curve_extra_1                  shift and go to state 224
    empty                          shift and go to state 225

state 217

    (50) do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE .

    ID              reduce using rule 50 (do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE .)
    IF              reduce using rule 50 (do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE .)
    WHILE           reduce using rule 50 (do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE .)
    DO              reduce using rule 50 (do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE .)
    RETURN          reduce using rule 50 (do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE .)
    PRINT           reduce using rule 50 (do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE .)
    CALL            reduce using rule 50 (do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE .)
    DOT             reduce using rule 50 (do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE .)
    LINE            reduce using rule 50 (do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE .)
    CURVE           reduce using rule 50 (do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE .)
    TYPE_INT        reduce using rule 50 (do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE .)
    TYPE_FLOAT      reduce using rule 50 (do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE .)
    TYPE_BOOLEAN    reduce using rule 50 (do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE .)
    R_BRACE         reduce using rule 50 (do_while_statute -> DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE .)


state 218

    (46) if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE .

    ID              reduce using rule 46 (if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE .)
    IF              reduce using rule 46 (if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE .)
    WHILE           reduce using rule 46 (if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE .)
    DO              reduce using rule 46 (if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE .)
    RETURN          reduce using rule 46 (if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE .)
    PRINT           reduce using rule 46 (if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE .)
    CALL            reduce using rule 46 (if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE .)
    DOT             reduce using rule 46 (if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE .)
    LINE            reduce using rule 46 (if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE .)
    CURVE           reduce using rule 46 (if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE .)
    TYPE_INT        reduce using rule 46 (if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE .)
    TYPE_FLOAT      reduce using rule 46 (if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE .)
    TYPE_BOOLEAN    reduce using rule 46 (if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE .)
    R_BRACE         reduce using rule 46 (if_statute -> IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE .)


state 219

    (47) if_else -> ELSE L_BRACE . code_statute R_BRACE
    (11) code_statute -> . statute code_statute
    (12) code_statute -> . empty
    (34) statute -> . assign_statute
    (35) statute -> . if_statute
    (36) statute -> . while_statute
    (37) statute -> . do_while_statute
    (38) statute -> . return_statute
    (39) statute -> . print_statute
    (40) statute -> . draw_statute
    (41) statute -> . local_var_dec
    (42) statute -> . function_call
    (2) empty -> .
    (43) assign_statute -> . ID array_assign_statute ASSIGN logical_exp END_LINE
    (46) if_statute -> . IF LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE if_else END_LINE
    (49) while_statute -> . WHILE LEFT_PAR logical_exp RIGHT_PAR L_BRACE code_statute R_BRACE END_LINE
    (50) do_while_statute -> . DO L_BRACE code_statute R_BRACE WHILE LEFT_PAR logical_exp RIGHT_PAR END_LINE
    (51) return_statute -> . RETURN logical_exp END_LINE
    (52) print_statute -> . PRINT LEFT_PAR logical_exp multi_print_statute RIGHT_PAR END_LINE
    (56) draw_statute -> . draw_point
    (57) draw_statute -> . draw_line
    (58) draw_statute -> . draw_curve
    (8) local_var_dec -> . type ID local_multivar_dec END_LINE
    (23) function_call -> . CALL ID LEFT_PAR exp cm_2 RIGHT_PAR END_LINE
    (59) draw_point -> . DOT LEFT_PAR logical_exp COMMA logical_exp point_extra_1 RIGHT_PAR END_LINE
    (64) draw_line -> . LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE
    (69) draw_curve -> . CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE
    (13) type -> . TYPE_INT array_dec
    (14) type -> . TYPE_FLOAT array_dec
    (15) type -> . TYPE_BOOLEAN array_dec

    R_BRACE         reduce using rule 2 (empty -> .)
    ID              shift and go to state 39
    IF              shift and go to state 34
    WHILE           shift and go to state 45
    DO              shift and go to state 31
    RETURN          shift and go to state 44
    PRINT           shift and go to state 36
    CALL            shift and go to state 50
    DOT             shift and go to state 48
    LINE            shift and go to state 42
    CURVE           shift and go to state 30
    TYPE_INT        shift and go to state 11
    TYPE_FLOAT      shift and go to state 6
    TYPE_BOOLEAN    shift and go to state 10

    function_call                  shift and go to state 29
    draw_line                      shift and go to state 41
    draw_statute                   shift and go to state 33
    draw_point                     shift and go to state 40
    while_statute                  shift and go to state 32
    return_statute                 shift and go to state 43
    do_while_statute               shift and go to state 35
    assign_statute                 shift and go to state 46
    draw_curve                     shift and go to state 47
    if_statute                     shift and go to state 49
    print_statute                  shift and go to state 37
    statute                        shift and go to state 51
    empty                          shift and go to state 52
    type                           shift and go to state 38
    code_statute                   shift and go to state 226
    local_var_dec                  shift and go to state 54

state 220

    (65) line_extra_1 -> COMMA logical_exp . line_extra_2
    (67) line_extra_2 -> . COMMA logical_exp
    (68) line_extra_2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 227
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    line_extra_2                   shift and go to state 228
    empty                          shift and go to state 229

state 221

    (64) draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR . END_LINE

    END_LINE        shift and go to state 230


state 222

    (62) point_extra_2 -> COMMA logical_exp .

    RIGHT_PAR       reduce using rule 62 (point_extra_2 -> COMMA logical_exp .)


state 223

    (70) curve_extra_1 -> COMMA . logical_exp curve_extra_2
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    logical_exp                    shift and go to state 231
    factor                         shift and go to state 71
    cond_exp                       shift and go to state 73
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 224

    (69) draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 . RIGHT_PAR END_LINE

    RIGHT_PAR       shift and go to state 232


state 225

    (71) curve_extra_1 -> empty .

    RIGHT_PAR       reduce using rule 71 (curve_extra_1 -> empty .)


state 226

    (47) if_else -> ELSE L_BRACE code_statute . R_BRACE

    R_BRACE         shift and go to state 233


state 227

    (67) line_extra_2 -> COMMA . logical_exp
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    cond_exp                       shift and go to state 73
    logical_exp                    shift and go to state 234
    factor                         shift and go to state 71
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 228

    (65) line_extra_1 -> COMMA logical_exp line_extra_2 .

    RIGHT_PAR       reduce using rule 65 (line_extra_1 -> COMMA logical_exp line_extra_2 .)


state 229

    (68) line_extra_2 -> empty .

    RIGHT_PAR       reduce using rule 68 (line_extra_2 -> empty .)


state 230

    (64) draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE .

    ID              reduce using rule 64 (draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE .)
    IF              reduce using rule 64 (draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE .)
    WHILE           reduce using rule 64 (draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE .)
    DO              reduce using rule 64 (draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE .)
    RETURN          reduce using rule 64 (draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE .)
    PRINT           reduce using rule 64 (draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE .)
    CALL            reduce using rule 64 (draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE .)
    DOT             reduce using rule 64 (draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE .)
    LINE            reduce using rule 64 (draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE .)
    CURVE           reduce using rule 64 (draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE .)
    TYPE_INT        reduce using rule 64 (draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE .)
    TYPE_FLOAT      reduce using rule 64 (draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE .)
    TYPE_BOOLEAN    reduce using rule 64 (draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE .)
    R_BRACE         reduce using rule 64 (draw_line -> LINE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp line_extra_1 RIGHT_PAR END_LINE .)


state 231

    (70) curve_extra_1 -> COMMA logical_exp . curve_extra_2
    (72) curve_extra_2 -> . COMMA logical_exp
    (73) curve_extra_2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 235
    RIGHT_PAR       reduce using rule 2 (empty -> .)

    curve_extra_2                  shift and go to state 236
    empty                          shift and go to state 237

state 232

    (69) draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR . END_LINE

    END_LINE        shift and go to state 238


state 233

    (47) if_else -> ELSE L_BRACE code_statute R_BRACE .

    END_LINE        reduce using rule 47 (if_else -> ELSE L_BRACE code_statute R_BRACE .)


state 234

    (67) line_extra_2 -> COMMA logical_exp .

    RIGHT_PAR       reduce using rule 67 (line_extra_2 -> COMMA logical_exp .)


state 235

    (72) curve_extra_2 -> COMMA . logical_exp
    (74) logical_exp -> . cond_exp logical_exp_2
    (77) cond_exp -> . exp cond_exp_2
    (80) exp -> . term exp_2
    (83) term -> . factor term_2
    (86) factor -> . LEFT_PAR logical_exp RIGHT_PAR
    (87) factor -> . factor_2 const_var
    (88) factor_2 -> . AS_OPERATOR
    (89) factor_2 -> . empty
    (2) empty -> .

    LEFT_PAR        shift and go to state 72
    AS_OPERATOR     shift and go to state 75
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    exp                            shift and go to state 67
    term                           shift and go to state 68
    cond_exp                       shift and go to state 73
    logical_exp                    shift and go to state 239
    factor                         shift and go to state 71
    factor_2                       shift and go to state 74
    empty                          shift and go to state 70

state 236

    (70) curve_extra_1 -> COMMA logical_exp curve_extra_2 .

    RIGHT_PAR       reduce using rule 70 (curve_extra_1 -> COMMA logical_exp curve_extra_2 .)


state 237

    (73) curve_extra_2 -> empty .

    RIGHT_PAR       reduce using rule 73 (curve_extra_2 -> empty .)


state 238

    (69) draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE .

    ID              reduce using rule 69 (draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE .)
    IF              reduce using rule 69 (draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE .)
    WHILE           reduce using rule 69 (draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE .)
    DO              reduce using rule 69 (draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE .)
    RETURN          reduce using rule 69 (draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE .)
    PRINT           reduce using rule 69 (draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE .)
    CALL            reduce using rule 69 (draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE .)
    DOT             reduce using rule 69 (draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE .)
    LINE            reduce using rule 69 (draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE .)
    CURVE           reduce using rule 69 (draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE .)
    TYPE_INT        reduce using rule 69 (draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE .)
    TYPE_FLOAT      reduce using rule 69 (draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE .)
    TYPE_BOOLEAN    reduce using rule 69 (draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE .)
    R_BRACE         reduce using rule 69 (draw_curve -> CURVE LEFT_PAR logical_exp COMMA logical_exp COMMA logical_exp COMMA logical_exp curve_extra_1 RIGHT_PAR END_LINE .)


state 239

    (72) curve_extra_2 -> COMMA logical_exp .

    RIGHT_PAR       reduce using rule 72 (curve_extra_2 -> COMMA logical_exp .)

